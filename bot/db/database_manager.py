# bot/db/database_manager.py - Êñ∞Âª∫Ê™îÊ°à
"""
Ë≥áÊñôÂ∫´ÁÆ°ÁêÜÂô® - Ëá™ÂãïÂàùÂßãÂåñÂíåÈÅ∑Áßª
Áµ±‰∏ÄÁÆ°ÁêÜÊâÄÊúâË≥áÊñôË°®ÁöÑÂâµÂª∫ÂíåÊõ¥Êñ∞
"""

import asyncio
from typing import Dict, List, Tuple, Optional, Any
from bot.db.pool import db_pool
from shared.logger import logger


class DatabaseManager:
    """Ë≥áÊñôÂ∫´ÁÆ°ÁêÜÂô® - Ë≤†Ë≤¨Ë≥áÊñôË°®ÂàùÂßãÂåñÂíåÈÅ∑Áßª"""
    
    def __init__(self):
        self.db = db_pool
        self.current_version = "1.0.0"
        
    async def initialize_all_tables(self, force_recreate: bool = False):
        """ÂàùÂßãÂåñÊâÄÊúâË≥áÊñôË°®"""
        logger.info("üîÑ ÈñãÂßãÂàùÂßãÂåñË≥áÊñôÂ∫´Ë°®Ê†º...")
        
        try:
            # ÂâµÂª∫ÁâàÊú¨ÁÆ°ÁêÜË°®
            await self._create_version_table()
            
            # Ê™¢Êü•Ë≥áÊñôÂ∫´ÁâàÊú¨
            current_db_version = await self._get_database_version()
            
            if force_recreate:
                logger.warning("‚ö†Ô∏è Âº∑Âà∂ÈáçÂª∫Ê®°Âºè - Â∞áÂà™Èô§ÊâÄÊúâÁèæÂ≠òË°®Ê†º")
                await self._drop_all_tables()
                current_db_version = None
            
            # ÂâµÂª∫ÂêÑÁ≥ªÁµ±ÁöÑË°®Ê†º
            await self._create_ticket_tables()
            await self._create_vote_tables()
            
            # Êõ¥Êñ∞Ë≥áÊñôÂ∫´ÁâàÊú¨
            await self._update_database_version(self.current_version)
            
            logger.info("‚úÖ Ë≥áÊñôÂ∫´Ë°®Ê†ºÂàùÂßãÂåñÂÆåÊàê")
            
        except Exception as e:
            logger.error(f"‚ùå Ë≥áÊñôÂ∫´ÂàùÂßãÂåñÂ§±ÊïóÔºö{e}")
            raise
    
    async def _create_version_table(self):
        """ÂâµÂª∫ÁâàÊú¨ÁÆ°ÁêÜË°®"""
        async with self.db.connection() as conn:
            async with conn.cursor() as cursor:
                await cursor.execute("""
                    CREATE TABLE IF NOT EXISTS database_version (
                        id INT PRIMARY KEY DEFAULT 1,
                        version VARCHAR(20) NOT NULL,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                        CONSTRAINT single_row CHECK (id = 1)
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
                """)
                await conn.commit()
    
    async def _create_ticket_tables(self):
        """ÂâµÂª∫Á•®Âà∏Á≥ªÁµ±Áõ∏ÈóúË°®Ê†º"""
        logger.info("üìã ÂâµÂª∫Á•®Âà∏Á≥ªÁµ±Ë°®Ê†º...")
        
        tables = {
            'tickets': """
                CREATE TABLE IF NOT EXISTS tickets (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    discord_id VARCHAR(20) NOT NULL COMMENT 'ÈñãÁ•®ËÄÖ Discord ID',
                    username VARCHAR(100) NOT NULL COMMENT 'ÈñãÁ•®ËÄÖÁî®Êà∂Âêç',
                    type VARCHAR(50) NOT NULL COMMENT 'Á•®Âà∏È°ûÂûã',
                    priority ENUM('high', 'medium', 'low') DEFAULT 'medium' COMMENT 'ÂÑ™ÂÖàÁ¥ö',
                    status ENUM('open', 'closed', 'archived') DEFAULT 'open' COMMENT 'ÁãÄÊÖã',
                    channel_id BIGINT NOT NULL COMMENT 'È†ªÈÅì ID',
                    guild_id BIGINT NOT NULL COMMENT '‰º∫ÊúçÂô® ID',
                    assigned_to BIGINT NULL COMMENT 'ÊåáÊ¥æÁöÑÂÆ¢Êúç ID',
                    rating INT NULL CHECK (rating BETWEEN 1 AND 5) COMMENT 'Ë©ïÂàÜ',
                    rating_feedback TEXT NULL COMMENT 'Ë©ïÂàÜÂõûÈ•ã',
                    tags JSON NULL COMMENT 'Ê®ôÁ±§',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT 'Âª∫Á´ãÊôÇÈñì',
                    closed_at TIMESTAMP NULL COMMENT 'ÈóúÈñâÊôÇÈñì',
                    closed_by VARCHAR(20) NULL COMMENT 'ÈóúÈñâËÄÖ ID',
                    close_reason TEXT NULL COMMENT 'ÈóúÈñâÂéüÂõ†',
                    last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'ÊúÄÂæåÊ¥ªÂãïÊôÇÈñì',
                    
                    INDEX idx_guild_status (guild_id, status),
                    INDEX idx_assigned (assigned_to),
                    INDEX idx_created (created_at),
                    INDEX idx_channel (channel_id),
                    INDEX idx_discord_id (discord_id)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
            """,
            
            'ticket_settings': """
                CREATE TABLE IF NOT EXISTS ticket_settings (
                    guild_id BIGINT PRIMARY KEY COMMENT '‰º∫ÊúçÂô® ID',
                    category_id BIGINT NULL COMMENT 'ÂàÜÈ°ûÈ†ªÈÅì ID',
                    support_roles JSON NULL COMMENT 'ÂÆ¢ÊúçË∫´ÂàÜÁµÑÂàóË°®',
                    max_tickets_per_user INT DEFAULT 3 COMMENT 'ÊØè‰∫∫ÊúÄÂ§ßÁ•®Âà∏Êï∏',
                    auto_close_hours INT DEFAULT 24 COMMENT 'Ëá™ÂãïÈóúÈñâÂ∞èÊôÇÊï∏',
                    sla_response_minutes INT DEFAULT 60 COMMENT 'SLA ÂõûÊáâÊôÇÈñì',
                    welcome_message TEXT NULL COMMENT 'Ê≠°ËøéË®äÊÅØ',
                    log_channel_id BIGINT NULL COMMENT 'Êó•Ë™åÈ†ªÈÅì ID',
                    sla_alert_channel_id BIGINT NULL COMMENT 'SLA Ë≠¶ÂëäÈ†ªÈÅì ID',
                    auto_assign_enabled BOOLEAN DEFAULT FALSE COMMENT 'Ëá™ÂãïÂàÜÈÖçÂïüÁî®',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
            """,
            
            'ticket_logs': """
                CREATE TABLE IF NOT EXISTS ticket_logs (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    ticket_id INT NOT NULL COMMENT 'Á•®Âà∏ ID',
                    action VARCHAR(50) NOT NULL COMMENT 'Êìç‰ΩúÈ°ûÂûã',
                    details TEXT NULL COMMENT 'Êìç‰ΩúË©≥ÊÉÖ',
                    created_by VARCHAR(20) NULL COMMENT 'Êìç‰ΩúËÄÖ ID',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    
                    INDEX idx_ticket (ticket_id),
                    INDEX idx_action (action),
                    INDEX idx_created (created_at)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
            """,
            
            'ticket_statistics_cache': """
                CREATE TABLE IF NOT EXISTS ticket_statistics_cache (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    guild_id BIGINT NOT NULL COMMENT '‰º∫ÊúçÂô® ID',
                    cache_key VARCHAR(100) NOT NULL COMMENT 'Âø´ÂèñÈçµ',
                    cache_data JSON NOT NULL COMMENT 'Âø´ÂèñË≥áÊñô',
                    expires_at TIMESTAMP NOT NULL COMMENT 'ÈÅéÊúüÊôÇÈñì',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    
                    UNIQUE KEY unique_cache (guild_id, cache_key),
                    INDEX idx_expires (expires_at)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
            """,
            
            'ticket_views': """
                CREATE TABLE IF NOT EXISTS ticket_views (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    ticket_id INT NOT NULL COMMENT 'Á•®Âà∏ ID',
                    user_id VARCHAR(20) NOT NULL COMMENT 'Êü•ÁúãËÄÖ ID',
                    viewed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    
                    INDEX idx_ticket (ticket_id),
                    INDEX idx_user (user_id),
                    INDEX idx_viewed (viewed_at)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
            """
        }
        
        await self._create_tables_batch(tables, "Á•®Âà∏Á≥ªÁµ±")
    
    async def _create_vote_tables(self):
        """ÂâµÂª∫ÊäïÁ•®Á≥ªÁµ±Áõ∏ÈóúË°®Ê†º"""
        logger.info("üó≥Ô∏è ÂâµÂª∫ÊäïÁ•®Á≥ªÁµ±Ë°®Ê†º...")
        
        tables = {
            'votes': """
                CREATE TABLE IF NOT EXISTS votes (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    title VARCHAR(255) NOT NULL COMMENT 'ÊäïÁ•®Ê®ôÈ°å',
                    is_multi BOOLEAN DEFAULT FALSE COMMENT 'ÊòØÂê¶Â§öÈÅ∏',
                    anonymous BOOLEAN DEFAULT FALSE COMMENT 'ÊòØÂê¶ÂåøÂêç',
                    allowed_roles JSON NULL COMMENT 'ÂÖÅË®±ÊäïÁ•®ÁöÑË∫´ÂàÜÁµÑ',
                    channel_id BIGINT NOT NULL COMMENT 'È†ªÈÅì ID',
                    guild_id BIGINT NOT NULL COMMENT '‰º∫ÊúçÂô® ID',
                    creator_id VARCHAR(20) NOT NULL COMMENT 'ÂâµÂª∫ËÄÖ ID',
                    start_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT 'ÈñãÂßãÊôÇÈñì',
                    end_time TIMESTAMP NOT NULL COMMENT 'ÁµêÊùüÊôÇÈñì',
                    announced BOOLEAN DEFAULT FALSE COMMENT 'ÊòØÂê¶Â∑≤ÂÖ¨ÂëäÁµêÊûú',
                    is_active BOOLEAN GENERATED ALWAYS AS (end_time > NOW()) STORED COMMENT 'ÊòØÂê¶ÈÄ≤Ë°å‰∏≠',
                    
                    INDEX idx_guild_active (guild_id, is_active),
                    INDEX idx_creator (creator_id),
                    INDEX idx_end_time (end_time),
                    INDEX idx_announced (announced)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
            """,
            
            'vote_options': """
                CREATE TABLE IF NOT EXISTS vote_options (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    vote_id INT NOT NULL COMMENT 'ÊäïÁ•® ID',
                    option_text VARCHAR(255) NOT NULL COMMENT 'ÈÅ∏È†ÖÊñáÂ≠ó',
                    option_order INT DEFAULT 0 COMMENT 'ÈÅ∏È†ÖÈ†ÜÂ∫è',
                    
                    FOREIGN KEY (vote_id) REFERENCES votes(id) ON DELETE CASCADE,
                    INDEX idx_vote (vote_id),
                    INDEX idx_order (vote_id, option_order)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
            """,
            
            'vote_responses': """
                CREATE TABLE IF NOT EXISTS vote_responses (
                    vote_id INT NOT NULL COMMENT 'ÊäïÁ•® ID',
                    user_id BIGINT NOT NULL COMMENT 'Áî®Êà∂ ID',
                    option_text VARCHAR(255) NOT NULL COMMENT 'ÈÅ∏ÊìáÁöÑÈÅ∏È†Ö',
                    voted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT 'ÊäïÁ•®ÊôÇÈñì',
                    
                    PRIMARY KEY (vote_id, user_id, option_text),
                    FOREIGN KEY (vote_id) REFERENCES votes(id) ON DELETE CASCADE,
                    INDEX idx_user (user_id),
                    INDEX idx_voted (voted_at)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
            """
        }
        
        await self._create_tables_batch(tables, "ÊäïÁ•®Á≥ªÁµ±")
    
    async def _create_tables_batch(self, tables: Dict[str, str], system_name: str):
        """ÊâπÊ¨°ÂâµÂª∫Ë°®Ê†º"""
        async with self.db.connection() as conn:
            async with conn.cursor() as cursor:
                for table_name, sql in tables.items():
                    try:
                        await cursor.execute(sql)
                        logger.debug(f"‚úÖ ÂâµÂª∫Ë°®Ê†ºÔºö{table_name}")
                    except Exception as e:
                        logger.error(f"‚ùå ÂâµÂª∫Ë°®Ê†º {table_name} Â§±ÊïóÔºö{e}")
                        raise
                
                await conn.commit()
                logger.info(f"‚úÖ {system_name}Ë°®Ê†ºÂâµÂª∫ÂÆåÊàê")
    
    async def check_table_exists(self, table_name: str) -> bool:
        """Ê™¢Êü•Ë°®Ê†ºÊòØÂê¶Â≠òÂú®"""
        async with self.db.connection() as conn:
            async with conn.cursor() as cursor:
                await cursor.execute("""
                    SELECT COUNT(*) FROM information_schema.tables 
                    WHERE table_schema = DATABASE() AND table_name = %s
                """, (table_name,))
                result = await cursor.fetchone()
                return result[0] > 0
    
    async def get_table_info(self, table_name: str) -> Dict:
        """ÂèñÂæóË°®Ê†ºË≥áË®ä"""
        async with self.db.connection() as conn:
            async with conn.cursor() as cursor:
                # Ê™¢Êü•Ë°®Ê†ºÊòØÂê¶Â≠òÂú®
                exists = await self.check_table_exists(table_name)
                if not exists:
                    return {"exists": False}
                
                # ÂèñÂæóË°åÊï∏
                await cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                row_count = (await cursor.fetchone())[0]
                
                # ÂèñÂæóÊ¨Ñ‰ΩçË≥áË®ä
                await cursor.execute(f"DESCRIBE {table_name}")
                columns = await cursor.fetchall()
                
                return {
                    "exists": True,
                    "row_count": row_count,
                    "columns": len(columns),
                    "column_details": columns
                }
    
    async def _get_database_version(self) -> str:
        """ÂèñÂæóË≥áÊñôÂ∫´ÁâàÊú¨"""
        try:
            async with self.db.connection() as conn:
                async with conn.cursor() as cursor:
                    await cursor.execute("SELECT version FROM database_version WHERE id = 1")
                    result = await cursor.fetchone()
                    return result[0] if result else None
        except:
            return None
    
    async def _update_database_version(self, version: str):
        """Êõ¥Êñ∞Ë≥áÊñôÂ∫´ÁâàÊú¨"""
        async with self.db.connection() as conn:
            async with conn.cursor() as cursor:
                await cursor.execute("""
                    INSERT INTO database_version (id, version) VALUES (1, %s)
                    ON DUPLICATE KEY UPDATE version = %s, updated_at = NOW()
                """, (version, version))
                await conn.commit()
    
    async def _drop_all_tables(self):
        """Âà™Èô§ÊâÄÊúâË°®Ê†ºÔºàË¨πÊÖé‰ΩøÁî®Ôºâ"""
        tables_to_drop = [
            'vote_responses', 'vote_options', 'votes',
            'ticket_views', 'ticket_statistics_cache', 'ticket_logs', 
            'tickets', 'ticket_settings', 'database_version'
        ]
        
        async with self.db.connection() as conn:
            async with conn.cursor() as cursor:
                # Êö´ÊôÇÁ¶ÅÁî®Â§ñÈçµÊ™¢Êü•
                await cursor.execute("SET FOREIGN_KEY_CHECKS = 0")
                
                for table in tables_to_drop:
                    try:
                        await cursor.execute(f"DROP TABLE IF EXISTS {table}")
                        logger.warning(f"üóëÔ∏è Â∑≤Âà™Èô§Ë°®Ê†ºÔºö{table}")
                    except Exception as e:
                        logger.error(f"Âà™Èô§Ë°®Ê†º {table} Â§±ÊïóÔºö{e}")
                
                # ÈáçÊñ∞ÂïüÁî®Â§ñÈçµÊ™¢Êü•
                await cursor.execute("SET FOREIGN_KEY_CHECKS = 1")
                await conn.commit()
    
    async def get_system_status(self) -> Dict:
        """ÂèñÂæóÁ≥ªÁµ±ÁãÄÊÖã"""
        status = {
            "database_version": await self._get_database_version(),
            "tables": {}
        }
        
        # Ê™¢Êü•‰∏ªË¶ÅË°®Ê†º
        important_tables = ['tickets', 'ticket_settings', 'votes', 'vote_options', 'vote_responses']
        
        for table in important_tables:
            status["tables"][table] = await self.get_table_info(table)
        
        return status


# ‰øÆÊîπ bot/db/ticket_dao.py - Ê∑ªÂä†Ëá™ÂãïÂàùÂßãÂåñ
class TicketDAO:
    """Á•®Âà∏Ë≥áÊñôÂ≠òÂèñÂ±§ - Â∏∂Ëá™ÂãïÂàùÂßãÂåñ"""
    
    def __init__(self):
        self.db = db_pool
        self._initialized = False
    
    async def _ensure_initialized(self):
        """Á¢∫‰øùË≥áÊñôÂ∫´Â∑≤ÂàùÂßãÂåñ"""
        if not self._initialized:
            try:
                # Ê™¢Êü•‰∏ªË¶ÅË°®Ê†ºÊòØÂê¶Â≠òÂú®
                async with self.db.connection() as conn:
                    async with conn.cursor() as cursor:
                        await cursor.execute("""
                            SELECT COUNT(*) FROM information_schema.tables 
                            WHERE table_schema = DATABASE() AND table_name = 'tickets'
                        """)
                        exists = (await cursor.fetchone())[0] > 0
                
                if not exists:
                    logger.warning("üìã Ê™¢Ê∏¨Âà∞Á•®Âà∏Ë°®Ê†º‰∏çÂ≠òÂú®ÔºåÈñãÂßãËá™ÂãïÂàùÂßãÂåñ...")
                    from bot.db.database_manager import DatabaseManager
                    db_manager = DatabaseManager()
                    await db_manager.initialize_all_tables()
                
                self._initialized = True
                logger.info("‚úÖ Á•®Âà∏ DAO ÂàùÂßãÂåñÂÆåÊàê")
                
            except Exception as e:
                logger.error(f"‚ùå Á•®Âà∏ DAO ÂàùÂßãÂåñÂ§±ÊïóÔºö{e}")
                raise
    
    async def create_ticket(self, discord_id: str, username: str, ticket_type: str, 
                           channel_id: int, guild_id: int, priority: str = 'medium') -> Optional[int]:
        """Âª∫Á´ãÊñ∞Á•®Âà∏"""
        await self._ensure_initialized()  # Á¢∫‰øùÂàùÂßãÂåñ
        
        try:
            async with self.db.connection() as conn:
                async with conn.cursor() as cursor:
                    await cursor.execute("""
                        INSERT INTO tickets (discord_id, username, type, priority, channel_id, guild_id)
                        VALUES (%s, %s, %s, %s, %s, %s)
                    """, (discord_id, username, ticket_type, priority, channel_id, guild_id))
                    
                    ticket_id = cursor.lastrowid
                    
                    # Ë®òÈåÑÊìç‰ΩúÊó•Ë™å
                    await cursor.execute("""
                        INSERT INTO ticket_logs (ticket_id, action, details, created_by)
                        VALUES (%s, 'created', %s, %s)
                    """, (ticket_id, f"Âª∫Á´ã{ticket_type}Á•®Âà∏", discord_id))
                    
                    await conn.commit()
                    logger.info(f"Âª∫Á´ãÁ•®Âà∏ #{ticket_id:04d} - Áî®Êà∂: {username}")
                    return ticket_id
                    
        except Exception as e:
            logger.error(f"Âª∫Á´ãÁ•®Âà∏ÈåØË™§Ôºö{e}")
            return None
    
    # Ê∑ªÂä†Áº∫Â∞ëÁöÑÊñπÊ≥ï
    async def get_guild_settings(self, guild_id: int) -> Dict[str, Any]:
        """ÂèñÂæó‰º∫ÊúçÂô®Ë®≠ÂÆöÔºàÂà•ÂêçÊñπÊ≥ïÔºâ"""
        return await self.get_settings(guild_id)
    
    async def cleanup_old_logs(self, days: int = 30) -> int:
        """Ê∏ÖÁêÜËàäÊó•Ë™å"""
        return await self.cleanup_old_data(days)
    
    @property
    def db_pool(self):
        """Ë≥áÊñôÂ∫´ÈÄ£Êé•Ê±†Â±¨ÊÄß"""
        return self.db
    
    # ÂÖ∂‰ªñÁèæÊúâÊñπÊ≥ï‰øùÊåÅ‰∏çËÆä...


# ‰øÆÊîπ bot/db/vote_dao.py - Ê∑ªÂä†Ëá™ÂãïÂàùÂßãÂåñ
_vote_initialized = False

async def _ensure_vote_tables():
    """Á¢∫‰øùÊäïÁ•®Ë°®Ê†ºÂ≠òÂú®"""
    global _vote_initialized
    if not _vote_initialized:
        try:
            # Ê™¢Êü•ÊäïÁ•®Ë°®Ê†ºÊòØÂê¶Â≠òÂú®
            async with db_pool.connection() as conn:
                async with conn.cursor() as cursor:
                    await cursor.execute("""
                        SELECT COUNT(*) FROM information_schema.tables 
                        WHERE table_schema = DATABASE() AND table_name = 'votes'
                    """)
                    exists = (await cursor.fetchone())[0] > 0
            
            if not exists:
                logger.warning("üó≥Ô∏è Ê™¢Ê∏¨Âà∞ÊäïÁ•®Ë°®Ê†º‰∏çÂ≠òÂú®ÔºåÈñãÂßãËá™ÂãïÂàùÂßãÂåñ...")
                from bot.db.database_manager import DatabaseManager
                db_manager = DatabaseManager()
                await db_manager.initialize_all_tables()
            
            _vote_initialized = True
            logger.info("‚úÖ ÊäïÁ•® DAO ÂàùÂßãÂåñÂÆåÊàê")
            
        except Exception as e:
            logger.error(f"‚ùå ÊäïÁ•® DAO ÂàùÂßãÂåñÂ§±ÊïóÔºö{e}")
            raise

# ‰øÆÊîπÊâÄÊúâÊäïÁ•®Áõ∏ÈóúÂáΩÊï∏ÔºåÂú®ÈñãÂßãÊôÇË™øÁî®ÂàùÂßãÂåñ
async def create_vote(session, creator_id):
    await _ensure_vote_tables()  # Á¢∫‰øùË°®Ê†ºÂ≠òÂú®
    
    try:
        async with db_pool.connection() as conn:
            async with conn.cursor() as cur:
                print(f"[DEBUG] Ê∫ñÂÇôÊèíÂÖ•ÊäïÁ•®Ôºö{session['title']}")
                await cur.execute("""
                    INSERT INTO votes (title, is_multi, anonymous, allowed_roles, channel_id, guild_id, creator_id, end_time, start_time)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
                """, (
                    session['title'],
                    bool(session['is_multi']),
                    bool(session['anonymous']),
                    json.dumps(session['allowed_roles']),
                    session['origin_channel'].id,
                    session['guild_id'],
                    str(creator_id),
                    session['end_time'],
                    session['start_time']
                ))
                await conn.commit()
                vote_id = cur.lastrowid
                print(f"[DEBUG] ÊäïÁ•®ÊèíÂÖ•ÊàêÂäüÔºåIDÔºö{vote_id}")
                return vote_id
    except Exception as e:
        print(f"[ERROR] create_vote Â§±ÊïóÔºö{e}")
        raise
