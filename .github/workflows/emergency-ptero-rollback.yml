name: 🚨 Emergency Ptero Rollback

on:
  workflow_dispatch:
    inputs:
      rollback_reason:
        description: '回滾原因 (必填)'
        required: true
        type: string
      target_commit:
        description: '目標 commit hash (可選，預設回滾到上一個版本)'
        required: false
        type: string
      skip_health_check:
        description: '跳過健康檢查 (緊急情況用)'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.10'
  TARGET_BRANCH: 'ptero'

# 確保同時只有一個回滾操作進行
concurrency:
  group: emergency-rollback-ptero
  cancel-in-progress: false

jobs:
  # ==========================================
  # 階段 1: 回滾前準備和驗證
  # ==========================================
  pre-rollback-validation:
    name: 🔍 Pre-rollback Validation
    runs-on: ubuntu-latest
    outputs:
      rollback_target: ${{ steps.target.outputs.rollback_target }}
      current_commit: ${{ steps.current.outputs.current_commit }}
      rollback_safe: ${{ steps.safety.outputs.rollback_safe }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 50  # 獲取足夠的歷史以找到目標commit
          ref: ptero

      - name: 📋 收集當前狀態
        id: current
        run: |
          current_commit=$(git rev-parse HEAD)
          echo "current_commit=$current_commit" >> $GITHUB_OUTPUT
          
          echo "📋 當前 ptero 分支狀態："
          echo "  當前 Commit: $current_commit"
          echo "  最後提交時間: $(git log -1 --format='%cd' --date=iso)"
          echo "  最後提交者: $(git log -1 --format='%an')"
          echo "  最後提交訊息: $(git log -1 --format='%s')"

      - name: 🎯 確定回滾目標
        id: target
        run: |
          if [ -n "${{ github.event.inputs.target_commit }}" ]; then
            target_commit="${{ github.event.inputs.target_commit }}"
            echo "使用指定的目標 commit: $target_commit"
          else
            # 找到上一個部署commit (排除當前commit)
            target_commit=$(git log --skip=1 --format='%H' --grep='🚀 自動部署從 main 分支' | head -1)
            if [ -z "$target_commit" ]; then
              # 如果找不到自動部署commit，使用上一個commit
              target_commit=$(git log --skip=1 --format='%H' | head -1)
              echo "未找到部署commit，使用上一個commit: $target_commit"
            else
              echo "找到上一個部署commit: $target_commit"
            fi
          fi
          
          # 驗證目標commit是否存在
          if ! git cat-file -e "$target_commit"; then
            echo "❌ 目標 commit $target_commit 不存在"
            exit 1
          fi
          
          echo "rollback_target=$target_commit" >> $GITHUB_OUTPUT
          
          echo "🎯 回滾目標詳情："
          echo "  目標 Commit: $target_commit"
          echo "  目標提交時間: $(git log -1 --format='%cd' --date=iso $target_commit)"
          echo "  目標提交者: $(git log -1 --format='%an' $target_commit)"
          echo "  目標提交訊息: $(git log -1 --format='%s' $target_commit)"

      - name: 🛡️ 安全性檢查
        id: safety
        run: |
          rollback_safe="true"
          target_commit="${{ steps.target.outputs.rollback_target }}"
          current_commit="${{ steps.current.outputs.current_commit }}"
          
          # 檢查是否嘗試回滾到同一個commit
          if [ "$target_commit" = "$current_commit" ]; then
            echo "⚠️ 目標commit與當前commit相同，無需回滾"
            rollback_safe="false"
          fi
          
          # 檢查目標commit的年齡
          target_date=$(git log -1 --format='%ct' $target_commit)
          current_date=$(date +%s)
          days_diff=$(( (current_date - target_date) / 86400 ))
          
          if [ $days_diff -gt 7 ]; then
            echo "⚠️ 警告：目標commit超過7天前 ($days_diff 天前)"
            echo "這可能導致重大功能回退，請確認是否需要如此大幅度的回滾"
          fi
          
          echo "rollback_safe=$rollback_safe" >> $GITHUB_OUTPUT
          
          if [ "$rollback_safe" = "false" ]; then
            echo "🛑 回滾安全檢查未通過"
          else
            echo "✅ 回滾安全檢查通過"
          fi

  # ==========================================
  # 階段 2: 執行緊急回滾
  # ==========================================
  emergency-rollback:
    name: 🚨 Execute Emergency Rollback
    runs-on: ubuntu-latest
    needs: pre-rollback-validation
    if: needs.pre-rollback-validation.outputs.rollback_safe == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 50
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 配置 Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 🚨 執行緊急回滾
        run: |
          target_commit="${{ needs.pre-rollback-validation.outputs.rollback_target }}"
          
          echo "🚨 開始緊急回滾操作..."
          echo "  從: ${{ needs.pre-rollback-validation.outputs.current_commit }}"
          echo "  到: $target_commit"
          echo "  原因: ${{ github.event.inputs.rollback_reason }}"
          
          # 切換到 ptero 分支
          git checkout ptero
          
          # 執行強制回滾
          git reset --hard $target_commit
          
          echo "✅ 本地回滾完成"

      - name: 📝 創建回滾記錄
        run: |
          # 創建回滾資訊文件
          cat > ROLLBACK_INFO.md << EOF
          # 🚨 緊急回滾記錄
          
          **回滾時間**: $(date -u +%Y-%m-%dT%H:%M:%SZ)
          **回滾原因**: ${{ github.event.inputs.rollback_reason }}
          **操作者**: ${{ github.actor }}
          **原始 Commit**: ${{ needs.pre-rollback-validation.outputs.current_commit }}
          **回滾到 Commit**: ${{ needs.pre-rollback-validation.outputs.rollback_target }}
          **GitHub Run ID**: ${{ github.run_id }}
          
          ## 🔄 回滾操作詳情
          
          - [x] 安全性檢查通過
          - [x] 目標commit驗證完成
          - [x] 強制回滾執行成功
          - [ ] 健康檢查 (取決於設定)
          
          ## 🔗 相關連結
          
          - [回滾日誌](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [原始Commit](https://github.com/${{ github.repository }}/commit/${{ needs.pre-rollback-validation.outputs.current_commit }})
          - [回滾目標Commit](https://github.com/${{ github.repository }}/commit/${{ needs.pre-rollback-validation.outputs.rollback_target }})
          
          ---
          
          > ⚠️ 這是緊急回滾操作，請確保相關團隊成員已得到通知
          > 🤖 緊急回滾系統 v1.0
          EOF
          
          # 生成JSON格式的回滾資訊
          cat > .rollback_info.json << EOF
          {
            "rollback_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "rollback_reason": "${{ github.event.inputs.rollback_reason }}",
            "operator": "${{ github.actor }}",
            "from_commit": "${{ needs.pre-rollback-validation.outputs.current_commit }}",
            "to_commit": "${{ needs.pre-rollback-validation.outputs.rollback_target }}",
            "run_id": "${{ github.run_id }}",
            "type": "emergency_rollback"
          }
          EOF
          
          echo "📝 回滾記錄創建完成"

      - name: 🚀 推送回滾變更
        run: |
          echo "🚀 推送回滾變更到 ptero 分支..."
          
          # 添加回滾文件
          git add ROLLBACK_INFO.md .rollback_info.json
          
          # 創建回滾提交
          git commit -m "🚨 緊急回滾操作

          回滾原因: ${{ github.event.inputs.rollback_reason }}
          回滾時間: $(date -u +%Y-%m-%dT%H:%M:%SZ)
          操作者: ${{ github.actor }}
          
          原始 Commit: ${{ needs.pre-rollback-validation.outputs.current_commit }}
          回滾到 Commit: ${{ needs.pre-rollback-validation.outputs.rollback_target }}
          
          🤖 Generated with [Claude Code](https://claude.ai/code)
          
          Co-Authored-By: Claude <noreply@anthropic.com>"
          
          # 強制推送（因為是回滾操作）
          git push --force-with-lease origin ptero
          
          echo "✅ 回滾變更已推送到 ptero 分支"

  # ==========================================
  # 階段 3: 回滾後健康檢查
  # ==========================================
  post-rollback-health-check:
    name: 🩺 Post-rollback Health Check
    runs-on: ubuntu-latest
    needs: [pre-rollback-validation, emergency-rollback]
    if: needs.emergency-rollback.result == 'success' && github.event.inputs.skip_health_check != 'true'

    steps:
      - name: Checkout rolled-back ptero branch
        uses: actions/checkout@v4
        with:
          ref: ptero
          fetch-depth: 1

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 🩺 驗證回滾後完整性
        run: |
          echo "🩺 驗證回滾後的 ptero 分支完整性..."
          
          # 檢查必要文件
          required_files=("bot/main.py" "requirements.txt" ".env.example" "start.py")
          missing_files=0
          
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file"
            else
              echo "❌ 缺失: $file"
              missing_files=$((missing_files + 1))
            fi
          done
          
          if [ $missing_files -gt 0 ]; then
            echo "⚠️ 警告：回滾後缺失 $missing_files 個必要文件"
            echo "這可能需要進一步的修復操作"
          fi
          
          # 基本語法檢查
          if [ -f "bot/main.py" ]; then
            python -m py_compile bot/main.py && echo "✅ 主程序語法檢查通過" || echo "❌ 主程序語法檢查失敗"
          fi
          
          echo "🩺 回滾完整性檢查完成"

      - name: 📊 生成回滾驗證報告
        run: |
          echo "📊 生成回滾驗證報告..."
          
          current_commit=$(git rev-parse HEAD)
          file_count=$(find . -type f -not -path "./.git/*" | wc -l)
          
          echo "📋 回滾後 Ptero 分支狀態報告"
          echo "=================================="
          echo "🔄 當前 Commit: $current_commit"
          echo "📁 檔案總數: $file_count"
          echo "🕒 驗證時間: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "🎯 回滾目標: ${{ needs.pre-rollback-validation.outputs.rollback_target }}"
          echo "📝 回滾原因: ${{ github.event.inputs.rollback_reason }}"
          echo "=================================="
          
          # 驗證回滾是否成功
          if [ "$current_commit" = "${{ needs.pre-rollback-validation.outputs.rollback_target }}" ]; then
            echo "✅ 回滾成功：當前commit符合預期目標"
          else
            echo "❌ 回滾可能失敗：當前commit與目標不符"
            echo "   預期: ${{ needs.pre-rollback-validation.outputs.rollback_target }}"
            echo "   實際: $current_commit"
          fi
          
          echo "✅ 回滾驗證報告生成完成"

  # ==========================================
  # 階段 4: 通知和後續處理
  # ==========================================
  rollback-notification:
    name: 📢 Rollback Notification
    runs-on: ubuntu-latest
    needs: [pre-rollback-validation, emergency-rollback, post-rollback-health-check]
    if: always() && needs.pre-rollback-validation.outputs.rollback_safe == 'true'

    steps:
      - name: 📊 回滾操作總結
        run: |
          echo "📊 緊急回滾操作總結"
          echo "=================================="
          echo "🚨 操作類型: 緊急回滾"
          echo "📝 回滾原因: ${{ github.event.inputs.rollback_reason }}"
          echo "👤 操作者: ${{ github.actor }}"
          echo "🕒 操作時間: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "🔄 工作流程 ID: ${{ github.run_id }}"
          echo "=================================="
          
          # 檢查各階段結果
          rollback_result="${{ needs.emergency-rollback.result }}"
          health_result="${{ needs.post-rollback-health-check.result || 'skipped' }}"
          
          echo "📋 階段結果摘要:"
          echo "  🚨 緊急回滾: $rollback_result"
          echo "  🩺 健康檢查: $health_result"
          echo "=================================="
          
          if [ "$rollback_result" = "success" ]; then
            echo "✅ 緊急回滾操作成功完成"
            echo "🎯 Ptero 分支已回滾到: ${{ needs.pre-rollback-validation.outputs.rollback_target }}"
            echo "🌐 Pterodactyl 環境應該會自動更新到回滾版本"
            
            echo ""
            echo "🔗 重要連結:"
            echo "  • 回滾日誌: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            echo "  • Ptero 分支: https://github.com/${{ github.repository }}/tree/ptero"
            echo "  • 目標 Commit: https://github.com/${{ github.repository }}/commit/${{ needs.pre-rollback-validation.outputs.rollback_target }}"
            
            echo ""
            echo "⚠️  重要提醒:"
            echo "  1. 請驗證 Pterodactyl 環境是否正常運作"
            echo "  2. 通知相關團隊成員回滾已完成"
            echo "  3. 考慮調查並修復導致回滾的原始問題"
            echo "  4. 必要時可準備重新部署修復版本"
            
          else
            echo "❌ 緊急回滾操作失敗"
            echo "💥 請查看上述日誌了解失敗原因"
            
            echo ""
            echo "🛠️ 失敗處理建議:"
            echo "  1. 檢查 Git 權限和分支狀態"
            echo "  2. 驗證目標 commit 是否有效"
            echo "  3. 考慮手動回滾操作"
            echo "  4. 聯繫技術團隊協助處理"
          fi
          
      - name: 🚨 關鍵警告
        if: needs.emergency-rollback.result == 'success'
        run: |
          echo "🚨 ==================== 關鍵警告 ==================== 🚨"
          echo ""
          echo "緊急回滾操作已完成，但請注意以下重要事項："
          echo ""
          echo "1. 🔄 這是一個強制回滾操作，可能會遺失最新的功能或修復"
          echo "2. 📊 請確認 Pterodactyl 環境中的應用程式已正確重啟"
          echo "3. 🧪 建議進行基本功能測試以確保系統穩定性"
          echo "4. 📝 記錄此次回滾事件以便後續分析"
          echo "5. 🔧 準備修復原始問題並重新部署正確版本"
          echo ""
          echo "🚨 ================================================== 🚨"