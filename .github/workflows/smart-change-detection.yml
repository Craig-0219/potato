name: 🧠 Smart Change Detection

on:
  pull_request:
    branches: [main, dev]
  push:
    branches: [main, dev]
  workflow_dispatch:
    inputs:
      analysis_mode:
        description: '分析模式'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - quick
          - detailed

env:
  CHANGE_DETECTION_VERSION: v2.0.0

jobs:
  analyze-changes:
    name: 🔍 變更影響分析
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    outputs:
      change_type: ${{ steps.classify.outputs.change_type }}
      impact_level: ${{ steps.classify.outputs.impact_level }}
      test_strategy: ${{ steps.classify.outputs.test_strategy }}
      cache_strategy: ${{ steps.classify.outputs.cache_strategy }}
      skip_workflows: ${{ steps.classify.outputs.skip_workflows }}
      run_quality: ${{ steps.classify.outputs.run_quality }}
      run_security: ${{ steps.classify.outputs.run_security }}
      run_tests: ${{ steps.classify.outputs.run_tests }}
      changed_files: ${{ steps.collect.outputs.changed_files }}
      
    steps:
    - name: 📥 檢出代碼
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔍 收集變更文件
      id: collect
      run: |
        # 根據觸發事件獲取變更文件
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # PR 模式：比較 base 和 head
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
        else
          # Push 模式：比較 HEAD 和前一個提交
          if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          else
            # 新分支的情況
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi
        fi
        
        echo "變更的文件:"
        echo "$CHANGED_FILES"
        
        # 將文件列表輸出到環境變數
        echo "changed_files<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # 計算變更統計
        TOTAL_FILES=$(echo "$CHANGED_FILES" | wc -l)
        echo "total_files=$TOTAL_FILES" >> $GITHUB_OUTPUT

    - name: 🐍 設置 Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 🧠 智能變更分類
      id: classify
      run: |
        # 設置環境變數並執行分類
        export CHANGED_FILES="${{ steps.collect.outputs.changed_files }}"
        python .github/scripts/classify-changes.py

    - name: 📋 輸出分析結果摘要
      run: |
        echo "🧠 Smart Change Detection 分析完成!"
        echo ""
        echo "📊 分析結果:"
        echo "• 變更類型: ${{ steps.classify.outputs.change_type }}"
        echo "• 影響等級: ${{ steps.classify.outputs.impact_level }}"
        echo "• 建議測試策略: ${{ steps.classify.outputs.test_strategy }}"
        echo "• 建議快取策略: ${{ steps.classify.outputs.cache_strategy }}"
        echo "• 可跳過的檢查: ${{ steps.classify.outputs.skip_workflows }}"
        echo ""
        echo "🎯 後續 workflows 將根據此分析結果調整執行策略"

  # 提供其他 workflows 可以使用的條件輸出
  provide-conditions:
    name: 📋 提供智能執行條件
    needs: analyze-changes
    runs-on: ubuntu-latest
    if: needs.analyze-changes.outputs.change_type != 'none'
    timeout-minutes: 1
    
    outputs:
      run_quality: ${{ needs.analyze-changes.outputs.run_quality }}
      run_security: ${{ needs.analyze-changes.outputs.run_security }}
      run_tests: ${{ needs.analyze-changes.outputs.run_tests }}
      change_type: ${{ needs.analyze-changes.outputs.change_type }}
      impact_level: ${{ needs.analyze-changes.outputs.impact_level }}
    
    steps:
    - name: 📋 記錄智能決策
      run: |
        echo "🧠 智能變更檢測分析完成"
        echo "=============================="
        echo ""
        echo "📊 分析結果:"
        echo "• 變更類型: ${{ needs.analyze-changes.outputs.change_type }}"
        echo "• 影響等級: ${{ needs.analyze-changes.outputs.impact_level }}"
        echo "• 測試策略: ${{ needs.analyze-changes.outputs.test_strategy }}"
        echo "• 快取策略: ${{ needs.analyze-changes.outputs.cache_strategy }}"
        echo ""
        echo "🎯 執行建議:"
        echo "• 品質檢查: ${{ needs.analyze-changes.outputs.run_quality }}"
        echo "• 安全掃描: ${{ needs.analyze-changes.outputs.run_security }}"
        echo "• 測試執行: ${{ needs.analyze-changes.outputs.run_tests }}"
        echo ""
        echo "💡 其他 workflows 可以使用這些條件來智能跳過不必要的步驟"
        echo "   例如: if: needs.change-detection.outputs.run_tests == 'true'"