name: 🔄 Auto Merge Dev to Main

# 並發控制 - 確保同一時間只有一個 auto-merge 執行
concurrency:
  group: auto-merge-dev-to-main
  cancel-in-progress: false  # 不取消進行中的合併，避免不一致狀態

on:
  push:
    branches: [dev]
    paths:
      - '**.py'
      - 'requirements*.txt'
      - '.env.example'
      - 'shared/**'
      - 'bot/**'
  workflow_dispatch:
    inputs:
      force_merge:
        description: '強制合併 (跳過某些檢查)'
        required: false
        default: false
        type: boolean
      dry_run:
        description: '乾跑模式 (不實際執行合併)'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.10'

jobs:
  # ==========================================
  # 階段 1: Dev 分支品質檢查
  # ==========================================
  dev-quality-check:
    name: 🧪 Dev Branch Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    outputs:
      tests_passed: ${{ steps.test-result.outputs.tests_passed }}
      quality_passed: ${{ steps.quality-result.outputs.quality_passed }}
      should_merge: ${{ steps.merge-decision.outputs.should_merge }}

    steps:
      - name: 📥 檢出 Dev 分支代碼
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: dev

      - name: 🐍 設置 Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 安裝依賴
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest>=8.0.0 pytest-asyncio>=0.23.0 pytest-cov>=4.0.0
          pip install black isort flake8 autoflake

      - name: 🧹 代碼品質檢查
        id: quality-check
        run: |
          echo "🧹 執行代碼品質檢查..."
          quality_issues=0
          
          # Black 格式檢查
          if ! black --check --diff . > black_report.txt 2>&1; then
            echo "❌ Black 格式問題:"
            head -10 black_report.txt
            quality_issues=$((quality_issues + 1))
          else
            echo "✅ Black 格式檢查通過"
          fi
          
          # isort 檢查
          if ! isort --check --diff . > isort_report.txt 2>&1; then
            echo "❌ Import 排序問題:"
            head -10 isort_report.txt
            quality_issues=$((quality_issues + 1))
          else
            echo "✅ isort 檢查通過"
          fi
          
          # flake8 檢查 (允許一些問題)
          if ! flake8 --count --max-complexity=15 --max-line-length=100 --statistics . > flake8_report.txt 2>&1; then
            echo "⚠️ Flake8 發現一些問題，但不阻止合併:"
            head -10 flake8_report.txt
          else
            echo "✅ flake8 檢查通過"  
          fi
          
          echo "quality_issues=$quality_issues" >> $GITHUB_OUTPUT

      - name: 🧪 執行測試套件
        id: test-execution
        env:
          TESTING: true
          DISCORD_TOKEN: ${{ secrets.DISCORD_TEST_TOKEN || 'test_token_for_auto_merge_validation_minimum_length_requirement_met' }}
          DB_HOST: "localhost"
          DB_USER: "test_user"
          DB_PASSWORD: ${{ secrets.DB_TEST_PASSWORD || 'test_password' }}
          DB_NAME: "test_database"
          DB_PORT: "3306"
          JWT_SECRET: ${{ secrets.JWT_TEST_SECRET || 'test_jwt_secret_for_auto_merge' }}
        run: |
          echo "🧪 執行基本測試套件..."
          test_failures=0
          
          # 語法檢查
          echo "🔍 Python 語法檢查..."
          if ! python -m compileall bot/ shared/ -q; then
            echo "❌ Python 語法錯誤"
            test_failures=$((test_failures + 1))
          else
            echo "✅ Python 語法檢查通過"
          fi
          
          # 配置載入測試
          echo "⚙️ 配置載入測試..."
          if ! python3 -c "
          import sys
          sys.path.append('.')
          try:
              import shared.config
              print('✅ 配置模組載入成功')
              
              # 測試基本導入
              from bot.db.pool import init_database
              print('✅ 資料庫模組載入成功')
              
          except Exception as e:
              print(f'❌ 配置載入失敗: {e}')
              sys.exit(1)
          "; then
            echo "✅ 配置載入測試通過"
          else
            echo "❌ 配置載入測試失敗"
            test_failures=$((test_failures + 1))
          fi
          
          # 如果有測試目錄，執行基本測試
          if [ -d "tests" ]; then
            echo "🧪 執行單元測試..."
            if pytest tests/ -v --tb=short --maxfail=3 -q 2>/dev/null; then
              echo "✅ 單元測試通過"
            else
              echo "❌ 單元測試失敗"
              test_failures=$((test_failures + 1))
            fi
          else
            echo "ℹ️ 未找到測試目錄，跳過單元測試"
          fi
          
          echo "test_failures=$test_failures" >> $GITHUB_OUTPUT

      - name: 📊 測試結果評估
        id: test-result
        run: |
          test_failures="${{ steps.test-execution.outputs.test_failures }}"
          
          if [ "$test_failures" -eq 0 ]; then
            echo "tests_passed=true" >> $GITHUB_OUTPUT
            echo "✅ 所有測試通過"
          else
            echo "tests_passed=false" >> $GITHUB_OUTPUT
            echo "❌ 測試失敗數: $test_failures"
          fi

      - name: 📊 品質結果評估
        id: quality-result
        run: |
          quality_issues="${{ steps.quality-check.outputs.quality_issues }}"
          
          if [ "$quality_issues" -le 1 ]; then
            echo "quality_passed=true" >> $GITHUB_OUTPUT
            echo "✅ 品質檢查通過 (問題數: $quality_issues)"
          else
            echo "quality_passed=false" >> $GITHUB_OUTPUT
            echo "❌ 品質問題過多: $quality_issues"
          fi

      - name: 🎯 合併決策
        id: merge-decision
        run: |
          tests_passed="${{ steps.test-result.outputs.tests_passed }}"
          quality_passed="${{ steps.quality-result.outputs.quality_passed }}"
          force_merge="${{ inputs.force_merge }}"
          
          echo "📊 合併決策分析:"
          echo "  測試結果: $tests_passed"
          echo "  品質檢查: $quality_passed"
          echo "  強制合併: $force_merge"
          
          should_merge="false"
          
          if [ "$tests_passed" = "true" ] && [ "$quality_passed" = "true" ]; then
            should_merge="true"
            echo "✅ 所有檢查通過，批准自動合併"
          elif [ "$force_merge" = "true" ]; then
            should_merge="true"
            echo "⚠️ 強制模式啟用，批准合併 (忽略檢查結果)"
          else
            echo "❌ 檢查未通過，阻止自動合併"
          fi
          
          echo "should_merge=$should_merge" >> $GITHUB_OUTPUT

  # ==========================================
  # 階段 2: 自動合併執行
  # ==========================================
  auto-merge-execution:
    name: 🔄 Execute Auto Merge
    runs-on: ubuntu-latest
    needs: dev-quality-check
    if: needs.dev-quality-check.outputs.should_merge == 'true' && github.event.inputs.dry_run != 'true'
    timeout-minutes: 10

    steps:
      - name: 📥 檢出完整 Git 歷史
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ⚙️ 配置 Git
        run: |
          git config --global user.name 'Auto Merge Bot'
          git config --global user.email 'noreply@github.com'

      - name: 🔄 執行自動合併
        run: |
          echo "🔄 開始自動合併 dev -> main..."
          
          # 確保我們在最新的 dev 分支
          git checkout dev
          git pull origin dev
          
          # 切換到 main 並確保最新
          git checkout main
          git pull origin main
          
          # 檢查是否有衝突
          echo "🔍 檢查合併衝突..."
          if git merge --no-commit --no-ff dev; then
            echo "✅ 無合併衝突"
            
            # 創建合併提交
            git commit -m "🔄 Auto merge dev to main - automated merge after quality checks passed"
            
            echo "📤 推送合併結果到 main..."
            git push origin main
            
            echo "✅ 自動合併完成"
            
          else
            echo "❌ 發現合併衝突！"
            git merge --abort
            echo "🚫 自動合併已取消，需要手動處理衝突"
            exit 1
          fi

      - name: 🏥 合併後健康檢查
        run: |
          echo "🏥 執行合併後健康檢查..."
          
          # 確保我們在 main 分支
          git checkout main
          
          # 檢查關鍵文件是否存在
          required_files=("bot/main.py" "shared/config.py" "requirements.txt")
          missing_files=""
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ 關鍵文件缺失: $file"  
              missing_files="$missing_files $file"
            else
              echo "✅ 文件存在: $file"
            fi
          done
          
          if [ -n "$missing_files" ]; then
            echo "🚨 合併後發現關鍵文件缺失: $missing_files"
            echo "❌ 健康檢查失敗"
            exit 1
          fi
          
          echo "✅ 合併後健康檢查通過"

  # ==========================================
  # 階段 3: 合併結果通知
  # ==========================================
  merge-notification:
    name: 📢 Merge Notification
    runs-on: ubuntu-latest
    needs: [dev-quality-check, auto-merge-execution]
    if: always()

    steps:
      - name: 📊 合併狀態報告
        run: |
          echo "📊 Dev -> Main 自動合併狀態報告"
          echo "======================================="
          
          quality_status="${{ needs.dev-quality-check.result }}"
          merge_status="${{ needs.auto-merge-execution.result }}"
          should_merge="${{ needs.dev-quality-check.outputs.should_merge }}"
          dry_run="${{ github.event.inputs.dry_run }}"
          
          echo "🔍 品質檢查: $quality_status"
          echo "🔄 合併執行: $merge_status"  
          echo "🎯 應該合併: $should_merge"
          echo "🧪 乾跑模式: ${dry_run:-false}"
          
          if [ "$dry_run" = "true" ]; then
            echo ""
            echo "🧪 乾跑模式 - 僅檢查，未實際合併"
            echo "📋 檢查結果:"
            echo "  - 測試: ${{ needs.dev-quality-check.outputs.tests_passed }}"
            echo "  - 品質: ${{ needs.dev-quality-check.outputs.quality_passed }}"
            echo "  - 決策: $should_merge"
            
          elif [ "$should_merge" = "true" ] && [ "$merge_status" = "success" ]; then
            echo ""
            echo "🎉 自動合併成功完成！"
            echo "✅ Dev 分支已成功合併到 Main"
            echo "🚀 Main 分支現在包含最新的生產就緒代碼"
            echo ""
            echo "📈 後續動作:"
            echo "  - Production 部署 workflow 將自動觸發"
            echo "  - 請監控部署狀態"
            
          elif [ "$should_merge" = "false" ]; then
            echo ""
            echo "🚫 自動合併被阻止"
            echo "❌ Dev 分支未通過品質檢查"
            echo ""
            echo "💡 修復建議:"
            if [ "${{ needs.dev-quality-check.outputs.tests_passed }}" = "false" ]; then
              echo "  - 修復失敗的測試"
            fi
            if [ "${{ needs.dev-quality-check.outputs.quality_passed }}" = "false" ]; then
              echo "  - 修復代碼品質問題 (執行 black . && isort .)"
            fi
            echo "  - 修復後重新推送到 dev 分支"
            
          else
            echo ""
            echo "💥 自動合併失敗"
            echo "❌ 合併過程中發生錯誤"
            echo "🔧 可能需要手動介入處理"
          fi

      - name: 🔔 狀態通知
        if: always()
        run: |
          if [ "${{ needs.auto-merge-execution.result }}" = "success" ]; then
            echo "🔔 發送成功通知..."
            echo "✅ Dev -> Main 自動合併完成"
          elif [ "${{ needs.dev-quality-check.outputs.should_merge }}" = "false" ]; then
            echo "🔔 發送品質檢查失敗通知..."  
            echo "⚠️ Dev 分支品質檢查未通過，合併被阻止"
          elif [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "🔔 乾跑模式完成通知..."
            echo "🧪 乾跑檢查完成，未執行實際合併"
          else
            echo "🔔 發送失敗通知..."
            echo "❌ Dev -> Main 自動合併失敗"
          fi