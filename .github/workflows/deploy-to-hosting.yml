name: 🚀 Deploy to Hosting & Auto Update

# 設定工作流程權限
permissions:
  contents: write
  issues: write
  pull-requests: write

# 當 main 分支有推送時觸發部署
on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.github/**'

  # 允許手動觸發
  workflow_dispatch:
    inputs:
      deployment_environment:
        description: '部署環境'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      force_deploy:
        description: '強制部署 (跳過健康檢查)'
        required: false
        default: false
        type: boolean
      notify_hosting:
        description: '通知託管商更新'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.10'

jobs:
  # ================================
  # 階段 1: 部署前驗證
  # ================================
  pre-deployment-check:
    name: 🔍 部署前驗證
    runs-on: ubuntu-latest
    outputs:
      deploy_ready: ${{ steps.check.outputs.deploy_ready }}
      version_tag: ${{ steps.version.outputs.tag }}
      commit_hash: ${{ steps.version.outputs.commit_hash }}

    steps:
    - name: 📥 Checkout Main Branch
      uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 10

    - name: 🏷️ Generate Version Tag
      id: version
      run: |
        # 生成版本標籤
        TIMESTAMP=$(date -u '+%Y%m%d-%H%M%S')
        COMMIT_HASH=$(git rev-parse --short HEAD)
        VERSION_TAG="v${TIMESTAMP}-${COMMIT_HASH}"

        echo "Generated version: $VERSION_TAG"
        echo "tag=$VERSION_TAG" >> $GITHUB_OUTPUT
        echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT

    - name: 🔍 Deployment Readiness Check
      id: check
      run: |
        echo "🔍 檢查部署準備狀態..."

        READY=true

        # 檢查核心文件
        if [[ ! -f "bot/main.py" ]]; then
          echo "❌ 缺少 bot/main.py"
          READY=false
        fi

        if [[ ! -f "requirements.txt" ]]; then
          echo "❌ 缺少 requirements.txt"
          READY=false
        fi

        if [[ ! -f "start.py" ]]; then
          echo "❌ 缺少 start.py"
          READY=false
        fi

        # 檢查 Dockerfile (如果存在)
        if [[ -f "Dockerfile" ]]; then
          echo "✅ 發現 Dockerfile"
        fi

        # 檢查最近提交是否包含 [skip-deploy] 標記
        LATEST_COMMIT=$(git log -1 --pretty=%B)
        if echo "$LATEST_COMMIT" | grep -q "\[skip-deploy\]"; then
          echo "🚫 提交包含 [skip-deploy] 標記"
          READY=false
        fi

        if [[ "$READY" == "true" ]] || [[ "${{ inputs.force_deploy }}" == "true" ]]; then
          echo "✅ 部署準備就緒"
          echo "deploy_ready=true" >> $GITHUB_OUTPUT
        else
          echo "❌ 部署準備未完成"
          echo "deploy_ready=false" >> $GITHUB_OUTPUT
        fi

  # ================================
  # 階段 2: 部署到 Ptero 分支
  # ================================
  deploy-to-ptero:
    name: 🦕 部署到 Ptero 分支
    needs: pre-deployment-check
    if: needs.pre-deployment-check.outputs.deploy_ready == 'true'
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Main Branch
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: ⚙️ Configure Git
      run: |
        git config user.name "GitHub Actions Deploy Bot"
        git config user.email "deploy@github-actions.com"

    - name: 🦕 Create/Update Ptero Branch
      run: |
        echo "🦕 準備 Ptero 部署分支..."

        # 檢查 ptero 分支是否存在
        if git ls-remote --heads origin ptero | grep -q ptero; then
          echo "📝 Ptero 分支已存在，切換並更新"
          git fetch origin ptero
          git checkout ptero

          # 重置到 main 分支的狀態
          git reset --hard origin/main
        else
          echo "🆕 創建新的 Ptero 分支"
          git checkout -b ptero
        fi

    - name: 🔧 Optimize for Ptero Deployment
      run: |
        echo "🔧 針對 Ptero 環境優化..."

        # 創建 Ptero 特定的環境配置
        cat > .ptero_env << 'EOF'
        # Ptero 環境配置
        ENVIRONMENT=production
        SYNC_COMMANDS=false
        API_EXTERNAL_ACCESS=true
        DEBUG=false
        LOG_LEVEL=INFO
        ENABLE_PTERO_OPTIMIZATIONS=true
        EOF

        # 創建 Ptero 啟動腳本
        cat > ptero_start.sh << 'EOF'
        #!/bin/bash
        # Ptero 專用啟動腳本

        echo "🦕 Ptero 環境啟動中..."

        # 設置環境變量
        if [ -f ".ptero_env" ]; then
          source .ptero_env
          echo "✅ 載入 Ptero 環境變量"
        fi

        # 安裝依賴
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
          echo "✅ 安裝依賴完成"
        fi

        # 啟動 Bot
        echo "🚀 啟動 Discord Bot..."
        python bot/main.py
        EOF

        chmod +x ptero_start.sh

        # 創建 Ptero 配置文件
        cat > ptero.json << EOF
        {
          "name": "Potato Discord Bot",
          "version": "${{ needs.pre-deployment-check.outputs.version_tag }}",
          "commit": "${{ needs.pre-deployment-check.outputs.commit_hash }}",
          "deployment_time": "$(date -u '+%Y-%m-%d %H:%M:%S UTC')",
          "environment": "${{ inputs.deployment_environment || 'production' }}",
          "ptero_optimized": true,
          "startup_command": "bash ptero_start.sh",
          "requirements": {
            "python": "3.10+",
            "memory": "512MB",
            "cpu": "1 core"
          }
        }
        EOF

        echo "✅ Ptero 優化配置完成"

    - name: 📤 Push to Ptero Branch
      run: |
        echo "📤 推送到 Ptero 分支..."

        git add .
        git commit -m "🦕 Ptero 部署更新 - ${{ needs.pre-deployment-check.outputs.version_tag }}

        🚀 部署信息:
        • 版本: ${{ needs.pre-deployment-check.outputs.version_tag }}
        • 提交: ${{ needs.pre-deployment-check.outputs.commit_hash }}
        • 環境: ${{ inputs.deployment_environment || 'production' }}
        • 時間: $(date -u '+%Y-%m-%d %H:%M:%S UTC')

        ✅ Ptero 優化:
        • 生產環境配置
        • 優化啟動腳本
        • 資源需求配置
        • 自動更新支持

        🤖 自動部署 by GitHub Actions" || echo "無新變更需要提交"

        git push origin ptero --force-with-lease
        echo "✅ Ptero 分支更新完成"

  # ================================
  # 階段 3: 通知託管商更新
  # ================================
  notify-hosting-providers:
    name: 📡 通知託管商自動更新
    needs: [pre-deployment-check, deploy-to-ptero]
    if: needs.deploy-to-ptero.result == 'success' && (inputs.notify_hosting != false)
    runs-on: ubuntu-latest

    strategy:
      matrix:
        hosting_provider: [pterodactyl, railway, render, heroku]
      fail-fast: false

    steps:
    - name: 📡 Send Update Signal to ${{ matrix.hosting_provider }}
      run: |
        echo "📡 發送更新信號到 ${{ matrix.hosting_provider }}..."

        VERSION="${{ needs.pre-deployment-check.outputs.version_tag }}"
        COMMIT="${{ needs.pre-deployment-check.outputs.commit_hash }}"
        BRANCH="ptero"

        case "${{ matrix.hosting_provider }}" in
          "pterodactyl")
            # Pterodactyl Panel Webhook
            if [[ -n "${{ secrets.PTERODACTYL_WEBHOOK_URL }}" ]]; then
              curl -X POST "${{ secrets.PTERODACTYL_WEBHOOK_URL }}" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer ${{ secrets.PTERODACTYL_API_KEY }}" \
                -d '{
                  "action": "restart_server",
                  "repository": "potato",
                  "branch": "'$BRANCH'",
                  "version": "'$VERSION'",
                  "commit": "'$COMMIT'",
                  "auto_pull": true
                }' || echo "⚠️ Pterodactyl webhook 調用失敗"
              echo "✅ Pterodactyl 更新信號發送完成"
            else
              echo "⚠️ Pterodactyl webhook URL 未設置"
            fi
            ;;

          "railway")
            # Railway Deployment Webhook
            if [[ -n "${{ secrets.RAILWAY_WEBHOOK_URL }}" ]]; then
              curl -X POST "${{ secrets.RAILWAY_WEBHOOK_URL }}" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
                -d '{
                  "service": "potato-discord-bot",
                  "environment": "production",
                  "branch": "'$BRANCH'",
                  "version": "'$VERSION'"
                }' || echo "⚠️ Railway webhook 調用失敗"
              echo "✅ Railway 更新信號發送完成"
            else
              echo "⚠️ Railway webhook URL 未設置"
            fi
            ;;

          "render")
            # Render Deploy Hook
            if [[ -n "${{ secrets.RENDER_DEPLOY_HOOK_URL }}" ]]; then
              curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_URL }}" \
                -H "Content-Type: application/json" \
                -d '{
                  "branch": "'$BRANCH'",
                  "version": "'$VERSION'",
                  "commit": "'$COMMIT'"
                }' || echo "⚠️ Render deploy hook 調用失敗"
              echo "✅ Render 更新信號發送完成"
            else
              echo "⚠️ Render deploy hook URL 未設置"
            fi
            ;;

          "heroku")
            # Heroku Release (如果使用 Heroku)
            if [[ -n "${{ secrets.HEROKU_API_KEY }}" ]]; then
              # 這裡可以使用 Heroku API 觸發部署
              echo "🔄 觸發 Heroku 部署..."
              # heroku releases:create --app your-app-name
            else
              echo "⚠️ Heroku API key 未設置"
            fi
            ;;
        esac

        # 通用 Webhook 通知 (如果設置了)
        if [[ -n "${{ secrets.GENERIC_WEBHOOK_URL }}" ]]; then
          curl -X POST "${{ secrets.GENERIC_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "event": "deployment_ready",
              "provider": "${{ matrix.hosting_provider }}",
              "repository": "${{ github.repository }}",
              "branch": "'$BRANCH'",
              "version": "'$VERSION'",
              "commit": "'$COMMIT'",
              "timestamp": "'$(date -u '+%Y-%m-%d %H:%M:%S UTC')'"
            }' || echo "⚠️ 通用 webhook 調用失敗"
        fi

  # ================================
  # 階段 4: Discord/Slack 通知
  # ================================
  deployment-notification:
    name: 📢 部署通知
    needs: [pre-deployment-check, deploy-to-ptero, notify-hosting-providers]
    if: always() && needs.deploy-to-ptero.result == 'success'
    runs-on: ubuntu-latest

    steps:
    - name: 📢 Discord Webhook 通知
      if: ${{ secrets.DISCORD_WEBHOOK_URL != '' }}
      run: |
        VERSION="${{ needs.pre-deployment-check.outputs.version_tag }}"
        COMMIT="${{ needs.pre-deployment-check.outputs.commit_hash }}"

        # 獲取部署狀態
        PTERO_STATUS="✅ 成功"
        if [[ "${{ needs.deploy-to-ptero.result }}" != "success" ]]; then
          PTERO_STATUS="❌ 失敗"
        fi

        NOTIFY_STATUS="✅ 已通知"
        if [[ "${{ needs.notify-hosting-providers.result }}" != "success" ]]; then
          NOTIFY_STATUS="⚠️ 部分失敗"
        fi

        curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d '{
            "embeds": [{
              "title": "🚀 Potato Bot 部署完成",
              "color": 65280,
              "fields": [
                {
                  "name": "📋 版本信息",
                  "value": "**版本:** `'$VERSION'`\n**提交:** `'$COMMIT'`\n**環境:** `${{ inputs.deployment_environment || 'production' }}`",
                  "inline": true
                },
                {
                  "name": "📊 部署狀態",
                  "value": "**Ptero 分支:** '$PTERO_STATUS'\n**託管商通知:** '$NOTIFY_STATUS'\n**總體狀態:** ✅ 成功",
                  "inline": true
                },
                {
                  "name": "🔗 相關連結",
                  "value": "[查看提交](${{ github.server_url }}/${{ github.repository }}/commit/${{ needs.pre-deployment-check.outputs.commit_hash }})\n[部署日誌](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                  "inline": false
                }
              ],
              "footer": {
                "text": "GitHub Actions • Potato Bot CI/CD"
              },
              "timestamp": "'$(date -u '+%Y-%m-%dT%H:%M:%S.000Z')'"
            }]
          }'

    - name: 📱 Slack 通知 (可選)
      if: ${{ secrets.SLACK_WEBHOOK_URL != '' }}
      run: |
        curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d '{
            "text": "🚀 Potato Bot 部署完成",
            "attachments": [
              {
                "color": "good",
                "fields": [
                  {
                    "title": "版本",
                    "value": "${{ needs.pre-deployment-check.outputs.version_tag }}",
                    "short": true
                  },
                  {
                    "title": "提交",
                    "value": "${{ needs.pre-deployment-check.outputs.commit_hash }}",
                    "short": true
                  },
                  {
                    "title": "環境",
                    "value": "${{ inputs.deployment_environment || 'production' }}",
                    "short": true
                  },
                  {
                    "title": "狀態",
                    "value": "部署成功，託管商已通知更新",
                    "short": false
                  }
                ]
              }
            ]
          }'

  # ================================
  # 階段 5: 失敗處理
  # ================================
  deployment-failure-handling:
    name: 🚨 部署失敗處理
    needs: [pre-deployment-check, deploy-to-ptero, notify-hosting-providers]
    if: always() && (failure() || needs.pre-deployment-check.outputs.deploy_ready == 'false')
    runs-on: ubuntu-latest

    steps:
    - name: 🚨 創建部署失敗 Issue
      uses: actions/github-script@v7
      with:
        script: |
          const readinessCheck = '${{ needs.pre-deployment-check.result }}';
          const pteroDeployment = '${{ needs.deploy-to-ptero.result }}';
          const hostingNotification = '${{ needs.notify-hosting-providers.result }}';

          let failureReasons = [];
          let severity = 'medium';

          if (readinessCheck === 'failure') {
            failureReasons.push('✗ 部署準備檢查失敗');
            severity = 'high';
          }

          if (pteroDeployment === 'failure') {
            failureReasons.push('✗ Ptero 分支部署失敗');
            severity = 'high';
          }

          if (hostingNotification === 'failure') {
            failureReasons.push('✗ 託管商通知失敗');
          }

          const severityEmoji = {
            'low': '🟨',
            'medium': '🟧',
            'high': '🟥',
            'critical': '🚨'
          };

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: severityEmoji[severity] + " 自動部署失敗 - " + severity.toUpperCase() + " 優先級",
            body: "## 🚨 自動部署失敗報告

          ### 📋 基本信息
          - **失敗時間:** " + new Date().toISOString() + "
          - **嚴重程度:** `" + severity.toUpperCase() + "`
          - **觸發提交:** [" + context.sha.substring(0, 7) + "](" + context.payload.repository.html_url + "/commit/" + context.sha + ")
          - **工作流程:** [查看詳情](" + context.payload.repository.html_url + "/actions/runs/" + context.runId + ")

          ### ❌ 失敗原因
          " + (failureReasons.length > 0 ? failureReasons.map(reason => "- " + reason).join('\n') : "- 未知原因，請檢查工作流程日誌") + "

          ### 🔍 階段結果
          - **部署準備:** `" + (readinessCheck || 'skipped') + "`
          - **Ptero 部署:** `" + (pteroDeployment || 'skipped') + "`
          - **託管商通知:** `" + (hostingNotification || 'skipped') + "`

          ### 🛠️ 手動修復步驟

          #### 1. 檢查 Ptero 分支
          \`\`\`bash
          git checkout ptero
          git pull origin ptero
          # 檢查分支狀態和文件完整性
          \`\`\`

          #### 2. 手動部署到託管商
          - 檢查 Pterodactyl Panel 是否需要手動重啟
          - 確認 Railway/Render 部署狀態
          - 驗證環境變量和配置

          #### 3. 驗證部署狀態
          \`\`\`bash
          # 檢查 Bot 是否正常啟動
          # 驗證所有 Cogs 載入
          # 測試核心功能
          \`\`\`

          ### 📋 修復檢查清單
          - [ ] 檢查並修復部署配置問題
          - [ ] 手動更新 Ptero 分支 (如需要)
          - [ ] 通知託管商手動部署
          - [ ] 驗證 Bot 在生產環境正常運行
          - [ ] 檢查所有核心功能正常
          - [ ] 修復完成後關閉此 Issue

          ### 🚨 緊急聯絡
          如果這影響到生產服務：
          1. 立即檢查 Bot 在託管環境的狀態
          2. 如有必要，回滾到上一個穩定版本
          3. 通知相關團隊成員

          /label " + severity + "-priority,deployment-failed,needs-review",
            labels: [severity + "-priority", "deployment-failed", "needs-review"]
          });

    - name: 🚨 緊急通知
      if: ${{ secrets.DISCORD_WEBHOOK_URL != '' }}
      run: |
        curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d '{
            "embeds": [{
              "title": "🚨 Potato Bot 部署失敗",
              "color": 16711680,
              "fields": [
                {
                  "name": "❌ 失敗階段",
                  "value": "準備檢查: `${{ needs.pre-deployment-check.result || 'skipped' }}`\nPtero 部署: `${{ needs.deploy-to-ptero.result || 'skipped' }}`\n託管商通知: `${{ needs.notify-hosting-providers.result || 'skipped' }}`",
                  "inline": false
                },
                {
                  "name": "🔗 處理連結",
                  "value": "[查看工作流程](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n[檢查 Issues](${{ github.server_url }}/${{ github.repository }}/issues)",
                  "inline": false
                }
              ],
              "footer": {
                "text": "需要立即處理 • GitHub Actions"
              },
              "timestamp": "'$(date -u '+%Y-%m-%dT%H:%M:%S.000Z')'"
            }]
          }'
