name: 🧪 Test Coverage & Quality

on:
  pull_request:
    branches: [main, dev]
    paths:
      - '**.py'
      - 'tests/**'
      - 'pyproject.toml'
      - 'requirements*.txt'
  push:
    branches: [main, dev]
    paths:
      - '**.py'
      - 'tests/**'
      - 'pyproject.toml'
      - 'requirements*.txt'
  workflow_dispatch:
    inputs:
      test_level:
        description: '測試層級'
        required: false
        default: 'all'
        type: choice
        options:
          - unit
          - integration
          - e2e
          - all

env:
  PYTHON_VERSION: '3.10'
  COVERAGE_THRESHOLD: 70

jobs:
  test-matrix:
    name: 🧪 測試矩陣
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        python-version: ['3.10', '3.11']
        test-type: [unit, integration]

    # 測試服務
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: test_potato_bot
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    env:
      # 測試環境變數
      TESTING: true
      DISCORD_TOKEN: test_token_comprehensive_validation_length_requirement_met_12345678_abcdefghijk
      DATABASE_URL: mysql://test_user:test_password@127.0.0.1:3306/test_potato_bot
      DB_HOST: 127.0.0.1
      DB_USER: test_user
      DB_PASSWORD: test_password
      DB_NAME: test_potato_bot
      DB_PORT: 3306
      JWT_SECRET: test_jwt_secret_for_automated_testing_purposes_only
      REDIS_URL: redis://127.0.0.1:6379/0
      # OAuth 和其他配置
      DISCORD_CLIENT_ID: test_client_id_12345678
      DISCORD_CLIENT_SECRET: test_client_secret_testing_purposes_only
      DISCORD_REDIRECT_URI: http://localhost:8080/auth/discord/callback
      DISCORD_GUILD_ID: test_guild_id_987654321
      ENABLE_API_SERVER: true
      API_EXTERNAL_ACCESS: false

    steps:
    - name: 📥 檢出代碼
      uses: actions/checkout@v4

    - name: 🐍 設置 Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: 📦 安裝依賴
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"
        pip install pytest-xdist pytest-benchmark pytest-mock

    - name: ⏳ 等待服務啟動
      if: matrix.test-type == 'integration'
      run: |
        echo "⏳ 等待資料庫和 Redis 服務啟動..."
        sleep 15

        # 驗證服務連接
        mysql -h 127.0.0.1 -u test_user -ptest_password -e "SELECT 1" test_potato_bot
        redis-cli -h 127.0.0.1 ping

    - name: 🧪 執行單元測試
      if: matrix.test-type == 'unit'
      run: |
        echo "🧪 執行單元測試..."
        pytest tests/unit/ \
          -v \
          --tb=short \
          --cov=bot \
          --cov=shared \
          --cov-report=html:htmlcov-${{ matrix.python-version }}-unit \
          --cov-report=xml:coverage-${{ matrix.python-version }}-unit.xml \
          --cov-report=term-missing \
          --junit-xml=junit-${{ matrix.python-version }}-unit.xml \
          --maxfail=5 \
          -n auto

    - name: 🔗 執行整合測試
      if: matrix.test-type == 'integration'
      run: |
        echo "🔗 執行整合測試..."
        pytest tests/integration/ \
          -v \
          --tb=short \
          --cov=bot \
          --cov=shared \
          --cov-append \
          --cov-report=html:htmlcov-${{ matrix.python-version }}-integration \
          --cov-report=xml:coverage-${{ matrix.python-version }}-integration.xml \
          --junit-xml=junit-${{ matrix.python-version }}-integration.xml \
          --maxfail=3 \
          -m "not slow" \
          -x

    - name: 📊 覆蓋率報告
      if: always()
      run: |
        echo "📊 生成覆蓋率報告..."
        coverage report --show-missing
        coverage json -o coverage-${{ matrix.python-version }}-${{ matrix.test-type }}.json

    - name: 📤 上傳覆蓋率到 Codecov
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: coverage-${{ matrix.python-version }}-${{ matrix.test-type }}.xml
        flags: ${{ matrix.test-type }}-tests
        name: codecov-${{ matrix.test-type }}-${{ matrix.python-version }}
        fail_ci_if_error: false

    - name: 📤 上傳測試報告
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-reports-${{ matrix.python-version }}-${{ matrix.test-type }}
        path: |
          htmlcov-${{ matrix.python-version }}-${{ matrix.test-type }}/
          coverage-${{ matrix.python-version }}-${{ matrix.test-type }}.xml
          coverage-${{ matrix.python-version }}-${{ matrix.test-type }}.json
          junit-${{ matrix.python-version }}-${{ matrix.test-type }}.xml
        retention-days: 30

  # E2E 測試 (端到端)
  e2e-tests:
    name: 🚀 端到端測試
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.test_level == 'e2e' || github.event.inputs.test_level == 'all'))
    timeout-minutes: 30

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: test_potato_bot_e2e
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    env:
      TESTING: true
      E2E_TESTING: true
      DISCORD_TOKEN: test_token_comprehensive_validation_length_requirement_met_12345678_abcdefghijk
      DATABASE_URL: mysql://test_user:test_password@127.0.0.1:3306/test_potato_bot_e2e
      DB_HOST: 127.0.0.1
      DB_USER: test_user
      DB_PASSWORD: test_password
      DB_NAME: test_potato_bot_e2e
      DB_PORT: 3306
      REDIS_URL: redis://127.0.0.1:6379/1

    steps:
    - name: 📥 檢出代碼
      uses: actions/checkout@v4

    - name: 🐍 設置 Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 安裝依賴
      run: |
        pip install -e ".[dev,test]"

    - name: ⏳ 準備 E2E 環境
      run: |
        echo "⏳ 準備端到端測試環境..."
        sleep 20

        # 初始化測試資料庫
        mysql -h 127.0.0.1 -u test_user -ptest_password -e "CREATE DATABASE IF NOT EXISTS test_potato_bot_e2e;" || true

    - name: 🚀 執行 E2E 測試
      run: |
        echo "🚀 執行端到端測試..."
        pytest tests/e2e/ \
          -v \
          --tb=long \
          --junit-xml=junit-e2e.xml \
          --maxfail=1 \
          -s \
          --timeout=300

    - name: 📤 上傳 E2E 報告
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: e2e-test-reports
        path: |
          junit-e2e.xml
        retention-days: 30

  # 覆蓋率匯總和品質門檻
  coverage-summary:
    name: 📊 覆蓋率摘要
    runs-on: ubuntu-latest
    needs: test-matrix
    if: always()

    steps:
    - name: 📥 檢出代碼
      uses: actions/checkout@v4

    - name: 🐍 設置 Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 安裝覆蓋率工具
      run: |
        pip install coverage[toml] jq

    - name: 📥 下載覆蓋率報告
      uses: actions/download-artifact@v3
      with:
        pattern: test-reports-*
        path: coverage-reports/
        merge-multiple: true

    - name: 📊 合併覆蓋率數據
      run: |
        echo "📊 合併多個覆蓋率報告..."
        cd coverage-reports/

        # 合併所有 .coverage 文件
        coverage combine coverage-*.json || true
        coverage report --format=markdown > coverage-summary.md || true
        coverage report --show-missing > coverage-detailed.txt || true

        # 生成統計摘要
        echo "## 📊 測試覆蓋率摘要" > final-summary.md
        echo "" >> final-summary.md

        # 提取覆蓋率百分比
        COVERAGE_PERCENT=$(coverage report --format=total 2>/dev/null || echo "0")
        echo "**總覆蓋率**: ${COVERAGE_PERCENT}%" >> final-summary.md
        echo "**門檻要求**: ${COVERAGE_THRESHOLD}%" >> final-summary.md
        echo "" >> final-summary.md

        if [ "$COVERAGE_PERCENT" -ge "${COVERAGE_THRESHOLD}" ]; then
          echo "✅ **狀態**: 通過覆蓋率要求" >> final-summary.md
          echo "COVERAGE_STATUS=pass" >> $GITHUB_ENV
        else
          echo "❌ **狀態**: 未達覆蓋率門檻" >> final-summary.md
          echo "COVERAGE_STATUS=fail" >> $GITHUB_ENV
        fi

        echo "COVERAGE_PERCENT=$COVERAGE_PERCENT" >> $GITHUB_ENV

        echo "" >> final-summary.md
        echo "### 詳細報告" >> final-summary.md
        echo '```' >> final-summary.md
        coverage report --show-missing >> final-summary.md || true
        echo '```' >> final-summary.md

    - name: 💬 覆蓋率評論 (PR)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');

          let summary = '';
          try {
            summary = fs.readFileSync('coverage-reports/final-summary.md', 'utf8');
          } catch (e) {
            summary = '❌ 無法讀取覆蓋率報告';
          }

          const comment = `## 🧪 測試覆蓋率報告

          ${summary}

          ---

          📋 **CI/CD 狀態**:
          - ✅ 測試執行完成
          - ${process.env.COVERAGE_STATUS === 'pass' ? '✅' : '❌'} 覆蓋率: ${process.env.COVERAGE_PERCENT}%

          📊 查看詳細報告請檢查 Artifacts 中的 \`test-reports\`
          `;

          // 查找現有評論
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.data.find(comment =>
            comment.user.type === 'Bot' && comment.body.includes('🧪 測試覆蓋率報告')
          );

          if (botComment) {
            // 更新現有評論
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            // 創建新評論
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }

    - name: 📤 上傳最終摘要
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: coverage-summary
        path: |
          coverage-reports/final-summary.md
          coverage-reports/coverage-detailed.txt
        retention-days: 30

    # 覆蓋率門檻檢查 - 僅警告，不強制失敗
    - name: 🎯 覆蓋率門檻檢查
      run: |
        echo "🎯 檢查覆蓋率門檻..."

        if [ "$COVERAGE_STATUS" = "fail" ]; then
          echo "⚠️ 警告: 覆蓋率 ${COVERAGE_PERCENT}% 低於門檻 ${COVERAGE_THRESHOLD}%"
          echo ""
          echo "建議:"
          echo "• 為新功能添加單元測試"
          echo "• 提高現有測試的覆蓋範圍"
          echo "• 檢查未測試的代碼分支"
          echo ""
          echo "注意: 目前僅發出警告，不會導致 CI 失敗"

          # 設置警告狀態，但不失敗
          echo "::warning title=覆蓋率不足::當前覆蓋率 ${COVERAGE_PERCENT}% 低於目標 ${COVERAGE_THRESHOLD}%"
        else
          echo "✅ 覆蓋率 ${COVERAGE_PERCENT}% 符合門檻要求 ${COVERAGE_THRESHOLD}%"
        fi

  # 性能測試 (可選)
  performance-tests:
    name: ⚡ 性能基準測試
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 15

    steps:
    - name: 📥 檢出代碼
      uses: actions/checkout@v4

    - name: 🐍 設置 Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 安裝依賴
      run: |
        pip install -e ".[dev,test]"
        pip install pytest-benchmark memory-profiler

    - name: ⚡ 執行性能測試
      run: |
        echo "⚡ 執行性能基準測試..."
        pytest tests/performance/ \
          --benchmark-only \
          --benchmark-json=benchmark-results.json \
          -v || true

    - name: 📊 性能報告摘要
      run: |
        echo "📊 性能測試摘要"
        echo "==============="

        if [ -f benchmark-results.json ]; then
          echo "✅ 性能基準測試完成"
          echo "詳細結果請查看 benchmark-results.json"
        else
          echo "ℹ️ 未發現性能測試"
        fi

    - name: 📤 上傳性能報告
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: |
          benchmark-results.json
        retention-days: 90
