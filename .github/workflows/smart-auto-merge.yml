name: 🧠 Smart Auto Merge - Dev to Main

# 權限設置
permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read

on:
  # 當輕量級 CI 成功完成時觸發
  workflow_run:
    workflows: ["🚀 Lightweight CI - Essential Checks Only"]
    types: [completed]
    branches: [dev]

  # 允許手動觸發
  workflow_dispatch:
    inputs:
      merge_type:
        description: '合併類型'
        required: true
        default: 'auto'
        type: choice
        options:
        - auto        # 自動判斷
        - force       # 強制合併
        - skip        # 跳過合併
      bypass_checks:
        description: '繞過額外檢查'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.10'

jobs:
  # 智能決策系統
  merge-decision:
    name: 🤖 合併決策分析
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'

    outputs:
      should_merge: ${{ steps.decision.outputs.should_merge }}
      merge_reason: ${{ steps.decision.outputs.merge_reason }}
      risk_level: ${{ steps.decision.outputs.risk_level }}
      changed_files: ${{ steps.analysis.outputs.changed_files }}

    steps:
    - name: 📥 檢出代碼
      uses: actions/checkout@v4
      with:
        ref: dev
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🔍 變更分析
      id: analysis
      run: |
        echo "🔍 分析最近的變更..."

        # 獲取變更文件
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
        echo "變更文件:"
        echo "$CHANGED_FILES" | tee changed_files.txt

        # 統計變更
        TOTAL_FILES=$(echo "$CHANGED_FILES" | wc -l)
        CORE_FILES=$(echo "$CHANGED_FILES" | grep -E "(main\.py|config\.py|database_manager\.py)" | wc -l)
        COGS_FILES=$(echo "$CHANGED_FILES" | grep -E "bot/cogs/.*\.py" | wc -l)
        DOC_FILES=$(echo "$CHANGED_FILES" | grep -E "(\.md|docs/)" | wc -l)

        echo "total_files=$TOTAL_FILES" >> $GITHUB_OUTPUT
        echo "core_files=$CORE_FILES" >> $GITHUB_OUTPUT
        echo "cogs_files=$COGS_FILES" >> $GITHUB_OUTPUT
        echo "doc_files=$DOC_FILES" >> $GITHUB_OUTPUT
        echo "changed_files<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: 🤖 智能合併決策
      id: decision
      run: |
        echo "🤖 執行智能合併決策..."

        # 獲取最新提交訊息
        LATEST_COMMIT=$(git log -1 --pretty=%B)
        echo "最新提交: $LATEST_COMMIT"

        # 預設值
        SHOULD_MERGE="false"
        MERGE_REASON="未知原因"
        RISK_LEVEL="medium"

        # 檢查手動觸發
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          if [ "${{ github.event.inputs.merge_type }}" = "force" ]; then
            SHOULD_MERGE="true"
            MERGE_REASON="手動強制合併"
            RISK_LEVEL="low"
          elif [ "${{ github.event.inputs.merge_type }}" = "skip" ]; then
            SHOULD_MERGE="false"
            MERGE_REASON="手動跳過合併"
          fi
        fi

        # 檢查提交標記
        if echo "$LATEST_COMMIT" | grep -q '\[no-merge\]'; then
          SHOULD_MERGE="false"
          MERGE_REASON="提交包含 [no-merge] 標記"
          echo "🚫 發現 [no-merge] 標記，跳過合併"
        elif echo "$LATEST_COMMIT" | grep -q '\[force-merge\]'; then
          SHOULD_MERGE="true"
          MERGE_REASON="提交包含 [force-merge] 標記"
          RISK_LEVEL="low"
          echo "🚀 發現 [force-merge] 標記，執行強制合併"
        elif echo "$LATEST_COMMIT" | grep -q '\[merge\]'; then
          SHOULD_MERGE="true"
          MERGE_REASON="提交包含 [merge] 標記"
          RISK_LEVEL="low"
          echo "✅ 發現 [merge] 標記，執行自動合併"
        fi

        # 基於變更類型的智能決策
        if [ "$SHOULD_MERGE" = "false" ] && [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
          TOTAL_FILES=${{ steps.analysis.outputs.total_files }}
          CORE_FILES=${{ steps.analysis.outputs.core_files }}
          COGS_FILES=${{ steps.analysis.outputs.cogs_files }}
          DOC_FILES=${{ steps.analysis.outputs.doc_files }}

          echo "變更統計: 總計=$TOTAL_FILES, 核心=$CORE_FILES, Cogs=$COGS_FILES, 文檔=$DOC_FILES"

          # 只有文檔變更 - 跳過
          if [ "$DOC_FILES" -gt 0 ] && [ "$CORE_FILES" -eq 0 ] && [ "$COGS_FILES" -eq 0 ]; then
            NON_DOC_FILES=$(echo "${{ steps.analysis.outputs.changed_files }}" | grep -v -E "(\.md|docs/|CHANGELOG|README)" | wc -l)
            if [ "$NON_DOC_FILES" -eq 0 ]; then
              SHOULD_MERGE="false"
              MERGE_REASON="僅文檔變更，跳過自動合併"
              echo "📚 僅檢測到文檔變更，跳過合併"
            fi
          fi

          # 小規模變更 - 自動合併
          if [ "$TOTAL_FILES" -le 5 ] && [ "$CORE_FILES" -eq 0 ]; then
            SHOULD_MERGE="true"
            MERGE_REASON="小規模變更，自動合併"
            RISK_LEVEL="low"
            echo "✨ 檢測到小規模變更，執行自動合併"
          fi

          # 一般變更 - 自動合併
          if [ "$TOTAL_FILES" -le 10 ] && [ "$CORE_FILES" -le 1 ]; then
            SHOULD_MERGE="true"
            MERGE_REASON="一般規模變更，自動合併"
            RISK_LEVEL="medium"
            echo "🔄 檢測到一般變更，執行自動合併"
          fi

          # 大規模變更 - 需要檢查
          if [ "$TOTAL_FILES" -gt 10 ] || [ "$CORE_FILES" -gt 1 ]; then
            echo "⚠️ 檢測到大規模變更，需要額外檢查"

            # 如果輕量級 CI 通過，仍可合併
            if [ "${{ github.event.workflow_run.conclusion }}" = "success" ]; then
              SHOULD_MERGE="true"
              MERGE_REASON="大規模變更但 CI 通過，執行合併"
              RISK_LEVEL="high"
              echo "✅ CI 通過，執行大規模變更合併"
            fi
          fi
        fi

        # 輸出結果
        echo "should_merge=$SHOULD_MERGE" >> $GITHUB_OUTPUT
        echo "merge_reason=$MERGE_REASON" >> $GITHUB_OUTPUT
        echo "risk_level=$RISK_LEVEL" >> $GITHUB_OUTPUT

        echo "🎯 合併決策結果:"
        echo "  合併: $SHOULD_MERGE"
        echo "  原因: $MERGE_REASON"
        echo "  風險: $RISK_LEVEL"

  # 執行自動合併
  execute-merge:
    name: 🚀 執行自動合併
    runs-on: ubuntu-latest
    needs: merge-decision
    if: needs.merge-decision.outputs.should_merge == 'true'

    steps:
    - name: 📥 檢出代碼
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: ⚙️ 設置 Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git config --local pull.rebase false

    - name: 🔄 執行合併操作
      run: |
        echo "🔄 開始執行自動合併..."
        echo "合併原因: ${{ needs.merge-decision.outputs.merge_reason }}"
        echo "風險等級: ${{ needs.merge-decision.outputs.risk_level }}"

        # 確保分支是最新的
        git fetch origin

        # 檢查 main 分支狀態
        git checkout main
        git pull origin main

        # 檢查 dev 分支狀態
        git checkout dev
        git pull origin dev

        # 執行合併
        git checkout main

        # 根據風險等級選擇合併策略
        if [ "${{ needs.merge-decision.outputs.risk_level }}" = "low" ]; then
          echo "🚀 低風險合併 - 使用 fast-forward"
          git merge dev --ff-only
        else
          echo "⚠️ 中/高風險合併 - 創建合併提交"
          MERGE_MSG="🔀 Auto merge dev to main - ${{ needs.merge-decision.outputs.merge_reason }} (Risk: ${{ needs.merge-decision.outputs.risk_level }})"
          git merge dev --no-ff -m "$MERGE_MSG"
        fi

        echo "✅ 合併完成"

    - name: 📤 推送變更
      run: |
        echo "📤 推送合併結果到 main 分支..."
        git push origin main
        echo "🎉 自動合併完成！"

    - name: 📊 合併統計
      run: |
        echo "📊 合併統計資訊"
        echo "================"
        echo "分支: dev → main"
        echo "提交數: $(git rev-list --count dev ^main~1)"
        echo "變更文件: $(echo '${{ needs.merge-decision.outputs.changed_files }}' | wc -l)"
        echo "合併類型: ${{ needs.merge-decision.outputs.risk_level }} 風險"
        echo "時間戳: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"

  # 合併失敗處理
  merge-failure:
    name: 🚨 合併失敗處理
    runs-on: ubuntu-latest
    needs: [merge-decision, execute-merge]
    if: failure() && needs.merge-decision.outputs.should_merge == 'true'

    steps:
    - name: 🚨 處理合併失敗
      run: |
        echo "🚨 自動合併失敗！"
        echo "原因: ${{ needs.merge-decision.outputs.merge_reason }}"
        echo ""
        echo "🔧 可能的解決方案:"
        echo "1. 檢查是否存在合併衝突"
        echo "2. 確認 main 分支沒有受保護規則限制"
        echo "3. 驗證 GitHub Token 權限"
        echo "4. 手動執行合併: git merge dev"
        echo ""
        echo "📞 請通知開發團隊處理此問題"

  # 跳過合併通知
  merge-skipped:
    name: ⏭️ 合併跳過通知
    runs-on: ubuntu-latest
    needs: merge-decision
    if: needs.merge-decision.outputs.should_merge == 'false'

    steps:
    - name: ⏭️ 合併跳過
      run: |
        echo "⏭️ 跳過自動合併"
        echo "原因: ${{ needs.merge-decision.outputs.merge_reason }}"
        echo ""
        echo "如需手動合併，請執行:"
        echo "  git checkout main"
        echo "  git merge dev"
        echo "  git push origin main"
