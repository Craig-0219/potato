name: Deploy to Ptero Branch
on:
  push:
    branches:
      - main   # 只在推送到 main 分支時觸發部署
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/**'
  workflow_dispatch:  # 允許手動觸發

permissions:
  contents: write   # 允許修改 repo 分支

jobs:
  build-deploy-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare clean deployment directory
        run: |
          rm -rf /tmp/ptero && mkdir -p /tmp/ptero
          echo "📁 準備乾淨的部署目錄"

      - name: Copy core application files
        run: |
          echo "📦 複製核心應用程式檔案..."
          
          # 複製主要代碼目錄
          rsync -a --prune-empty-dirs \
            --include='bot/***' \
            --include='shared/***' \
            --include='transcripts/' \
            --exclude='**/__pycache__' \
            --exclude='**/*.pyc' \
            --exclude='**/*.log' \
            --exclude='**/.*' \
            --exclude='*' \
            ./ /tmp/ptero/

          echo "✅ 核心檔案複製完成"

      - name: Copy dependencies and configuration
        run: |
          echo "⚙️ 複製依賴和配置檔案..."
          
          # 複製依賴文件
          mkdir -p /tmp/ptero/docs/requirements
          cp requirements.txt /tmp/ptero/
          cp docs/requirements/requirements-production.txt /tmp/ptero/docs/requirements/

          # 複製環境配置範例
          cp .env.example /tmp/ptero/ 2>/dev/null || echo ".env.example not found, creating basic one"
          
          # 如果沒有 .env.example，創建一個基本的
          if [ ! -f /tmp/ptero/.env.example ]; then
            cat > /tmp/ptero/.env.example << 'EOF'
          # Discord Bot Token
          DISCORD_TOKEN=your_discord_bot_token_here
          
          # Database Configuration
          DB_HOST=localhost
          DB_PORT=3306
          DB_USER=your_db_user
          DB_PASSWORD=your_db_password
          DB_NAME=potato_bot
          
          # Redis Configuration (Optional)
          REDIS_URL=redis://localhost:6379
          
          # API Server Configuration
          ENABLE_API_SERVER=true
          API_EXTERNAL_ACCESS=true
          LOCAL_API_HOST=0.0.0.0
          LOCAL_API_PORT=8080
          
          # Basic Settings
          DEBUG=false
          LOG_LEVEL=INFO
          EOF
          fi

          echo "✅ 配置檔案複製完成"

      - name: Copy startup tools
        run: |
          echo "🚀 複製啟動工具..."
          
          # 複製快速啟動工具
          cp start.py /tmp/ptero/ 2>/dev/null || echo "start.py not found, skipping"
          cp start.bat /tmp/ptero/ 2>/dev/null || echo "start.bat not found, skipping"  
          cp start.sh /tmp/ptero/ 2>/dev/null || echo "start.sh not found, skipping"
          cp QUICK_START.md /tmp/ptero/ 2>/dev/null || echo "QUICK_START.md not found, skipping"

          # 設置執行權限
          chmod +x /tmp/ptero/start.py 2>/dev/null || echo "start.py not found for chmod"
          chmod +x /tmp/ptero/start.sh 2>/dev/null || echo "start.sh not found for chmod"

          echo "✅ 啟動工具設置完成"

      - name: Create deployment summary
        run: |
          echo "📋 創建部署摘要..."
          cd /tmp/ptero
          
          cat > DEPLOYMENT_INFO.md << 'EOF'
          # Ptero 部署分支
          
          這是一個自動生成的乾淨部署分支，僅包含運行所需的檔案。
          
          ## 部署資訊
          - **源分支**: main
          - **部署時間**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **提交雜湊**: ${{ github.sha }}
          - **GitHub Actor**: ${{ github.actor }}
          
          ## 包含的功能
          - ✅ Discord Bot 核心功能
          - ✅ 票券系統
          - ✅ 投票系統
          - ✅ Web API 服務
          - ✅ 離線模式支援
          - ✅ Redis 整合
          - ✅ 本地快取後備
          
          ## 快速開始
          1. 複製 `.env.example` 到 `.env`
          2. 填寫必要的環境變數
          3. 運行 `python3 bot/main.py` 或使用提供的啟動工具
          
          ## 注意事項
          - 這個分支會被自動覆寫，請勿直接修改
          - 所有變更應該推送到 main 分支
          - 部署會自動觸發並更新此分支
          EOF

      - name: Setup git and deploy
        run: |
          echo "🚀 設置 Git 並部署..."
          cd /tmp/ptero
          
          git init
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # 設定遠端
          git remote add origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
          
          # 添加所有檔案
          git add .

          # 檢查是否有變更需要提交
          if ! git diff --cached --quiet; then
            echo "📝 發現變更，準備部署..."
            
            # 獲取提交訊息
            COMMIT_MSG="🚀 自動部署 (main → ptero)
            
            📅 部署時間: $(date -u +"%Y-%m-%d %H:%M:%S UTC")  
            🔗 源提交: ${{ github.sha }}
            👤 觸發者: ${{ github.actor }}
            
            🎯 這是一個從 main 分支自動生成的乾淨部署版本"
            
            git commit -m "$COMMIT_MSG"
            
            echo "⬆️ 推送到 ptero 分支..."
            # 強制推送到 ptero 分支（部署分支應該完全替換）
            git push origin HEAD:ptero --force
            
            echo "✅ 部署完成！"
          else
            echo "ℹ️ 沒有變更需要部署"
          fi

