name: 📊 Deployment Status Monitor

on:
  schedule:
    # 每30分鐘檢查一次部署狀態
    - cron: '*/30 * * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: '檢查類型'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'ptero_only'
          - 'main_only'
      send_notification:
        description: '發送通知 (即使狀態正常)'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.10'

jobs:
  # ==========================================
  # 階段 1: 收集部署狀態資訊
  # ==========================================
  collect-deployment-status:
    name: 📋 Collect Deployment Status
    runs-on: ubuntu-latest
    outputs:
      ptero_status: ${{ steps.ptero.outputs.status }}
      ptero_commit: ${{ steps.ptero.outputs.commit }}
      ptero_deploy_time: ${{ steps.ptero.outputs.deploy_time }}
      main_status: ${{ steps.main.outputs.status }}
      main_commit: ${{ steps.main.outputs.commit }}
      sync_status: ${{ steps.sync.outputs.status }}
      health_score: ${{ steps.health.outputs.score }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: 🎯 檢查 Ptero 分支狀態
        id: ptero
        run: |
          echo "🎯 檢查 Ptero 分支狀態..."
          
          # 檢查 ptero 分支是否存在
          if git show-ref --verify --quiet refs/remotes/origin/ptero; then
            git checkout ptero
            ptero_commit=$(git rev-parse HEAD)
            ptero_status="active"
            
            # 檢查部署資訊文件
            if [ -f ".ptero_deploy_info.json" ]; then
              deploy_time=$(jq -r '.deploy_time // "unknown"' .ptero_deploy_info.json)
              echo "deploy_time=$deploy_time" >> $GITHUB_OUTPUT
            else
              deploy_time=$(git log -1 --format='%cd' --date=iso)
              echo "deploy_time=$deploy_time" >> $GITHUB_OUTPUT
            fi
            
            # 檢查關鍵文件完整性
            required_files=("bot/main.py" "requirements.txt" ".env.example" "start.py")
            missing_count=0
            
            for file in "${required_files[@]}"; do
              if [ ! -f "$file" ]; then
                missing_count=$((missing_count + 1))
              fi
            done
            
            if [ $missing_count -gt 0 ]; then
              ptero_status="incomplete"
              echo "⚠️ Ptero 分支缺失 $missing_count 個關鍵文件"
            fi
            
          else
            ptero_commit="not_found"
            ptero_status="missing"
            echo "deploy_time=never" >> $GITHUB_OUTPUT
            echo "❌ Ptero 分支不存在"
          fi
          
          echo "status=$ptero_status" >> $GITHUB_OUTPUT
          echo "commit=$ptero_commit" >> $GITHUB_OUTPUT
          
          echo "📊 Ptero 分支狀態: $ptero_status (Commit: $ptero_commit)"

      - name: 🎯 檢查 Main 分支狀態
        id: main
        run: |
          echo "🎯 檢查 Main 分支狀態..."
          
          git checkout main
          main_commit=$(git rev-parse HEAD)
          main_status="active"
          
          # 檢查最近的提交時間
          last_commit_time=$(git log -1 --format='%ct')
          current_time=$(date +%s)
          hours_since_commit=$(( (current_time - last_commit_time) / 3600 ))
          
          if [ $hours_since_commit -gt 168 ]; then  # 超過7天
            main_status="stale"
            echo "⚠️ Main 分支超過7天未更新 ($hours_since_commit 小時)"
          fi
          
          echo "status=$main_status" >> $GITHUB_OUTPUT
          echo "commit=$main_commit" >> $GITHUB_OUTPUT
          
          echo "📊 Main 分支狀態: $main_status (Commit: $main_commit)"

      - name: 🔄 檢查分支同步狀態
        id: sync
        run: |
          echo "🔄 檢查 Main 和 Ptero 分支同步狀態..."
          
          main_commit="${{ steps.main.outputs.commit }}"
          ptero_commit="${{ steps.ptero.outputs.commit }}"
          sync_status="unknown"
          
          if [ "$ptero_commit" = "not_found" ]; then
            sync_status="ptero_missing"
          elif [ "$main_commit" = "$ptero_commit" ]; then
            sync_status="synced"
          else
            # 檢查哪個分支更新
            if git merge-base --is-ancestor $ptero_commit $main_commit 2>/dev/null; then
              sync_status="main_ahead"
              commits_ahead=$(git rev-list --count $ptero_commit..$main_commit)
              echo "📈 Main 分支領先 $commits_ahead 個提交"
            elif git merge-base --is-ancestor $main_commit $ptero_commit 2>/dev/null; then
              sync_status="ptero_ahead"  # 不太可能，但理論上可能
              echo "⚠️ Ptero 分支領先 Main 分支（異常狀況）"
            else
              sync_status="diverged"
              echo "🚨 分支已分歧，需要手動處理"
            fi
          fi
          
          echo "status=$sync_status" >> $GITHUB_OUTPUT
          echo "📊 同步狀態: $sync_status"

      - name: 🏥 計算系統健康分數
        id: health
        run: |
          echo "🏥 計算系統健康分數..."
          
          score=100
          ptero_status="${{ steps.ptero.outputs.status }}"
          main_status="${{ steps.main.outputs.status }}"
          sync_status="${{ steps.sync.outputs.status }}"
          
          # 根據各項狀態調整分數
          case "$ptero_status" in
            "active") score=$((score - 0)) ;;
            "incomplete") score=$((score - 20)) ;;
            "missing") score=$((score - 50)) ;;
          esac
          
          case "$main_status" in
            "active") score=$((score - 0)) ;;
            "stale") score=$((score - 10)) ;;
          esac
          
          case "$sync_status" in
            "synced") score=$((score - 0)) ;;
            "main_ahead") score=$((score - 15)) ;;
            "ptero_missing") score=$((score - 30)) ;;
            "diverged") score=$((score - 40)) ;;
          esac
          
          # 確保分數不會低於0
          if [ $score -lt 0 ]; then
            score=0
          fi
          
          echo "score=$score" >> $GITHUB_OUTPUT
          
          # 根據分數判斷健康等級
          if [ $score -ge 90 ]; then
            health_level="excellent"
            health_emoji="🟢"
          elif [ $score -ge 70 ]; then
            health_level="good"  
            health_emoji="🟡"
          elif [ $score -ge 50 ]; then
            health_level="warning"
            health_emoji="🟠"
          else
            health_level="critical"
            health_emoji="🔴"
          fi
          
          echo "📊 系統健康分數: $score/100 ($health_level $health_emoji)"

  # ==========================================
  # 階段 2: 生成監控報告
  # ==========================================
  generate-monitor-report:
    name: 📊 Generate Monitor Report
    runs-on: ubuntu-latest
    needs: collect-deployment-status
    
    steps:
      - name: 📋 生成部署狀態報告
        run: |
          echo "📋 生成部署狀態監控報告..."
          echo "=============================================="
          echo "🕐 監控時間: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "🔄 檢查類型: ${{ github.event.inputs.check_type || 'scheduled' }}"
          echo "=============================================="
          
          # 系統整體狀態
          health_score="${{ needs.collect-deployment-status.outputs.health_score }}"
          echo ""
          echo "🏥 系統健康狀態："
          echo "   健康分數: $health_score/100"
          
          if [ $health_score -ge 90 ]; then
            echo "   狀態等級: 優秀 🟢"
          elif [ $health_score -ge 70 ]; then
            echo "   狀態等級: 良好 🟡"
          elif [ $health_score -ge 50 ]; then
            echo "   狀態等級: 警告 🟠"
          else
            echo "   狀態等級: 危急 🔴"
          fi
          
          # 各分支詳細狀態
          echo ""
          echo "📊 分支狀態詳情："
          echo "   Main 分支: ${{ needs.collect-deployment-status.outputs.main_status }}"
          echo "   Main Commit: ${{ needs.collect-deployment-status.outputs.main_commit }}"
          echo "   Ptero 分支: ${{ needs.collect-deployment-status.outputs.ptero_status }}"
          echo "   Ptero Commit: ${{ needs.collect-deployment-status.outputs.ptero_commit }}"
          echo "   最後部署: ${{ needs.collect-deployment-status.outputs.ptero_deploy_time }}"
          
          # 同步狀態
          echo ""
          echo "🔄 同步狀態："
          sync_status="${{ needs.collect-deployment-status.outputs.sync_status }}"
          echo "   狀態: $sync_status"
          
          case "$sync_status" in
            "synced")
              echo "   📝 Main 和 Ptero 分支完全同步 ✅"
              ;;
            "main_ahead") 
              echo "   📝 Main 分支有新的提交待部署 ⏳"
              echo "   💡 建議: 如果變更已測試完成，可考慮觸發部署"
              ;;
            "ptero_missing")
              echo "   📝 Ptero 分支不存在 ❌"
              echo "   🚨 警告: 這會導致部署失敗"
              ;;
            "diverged")
              echo "   📝 分支已分歧，需要手動處理 🚨"
              echo "   🛠️ 需要: 立即進行分支同步或回滾操作"
              ;;
          esac
          
          echo "=============================================="

      - name: 🚨 檢查是否需要警報
        id: alert
        run: |
          health_score="${{ needs.collect-deployment-status.outputs.health_score }}"
          sync_status="${{ needs.collect-deployment-status.outputs.sync_status }}"
          send_notification="${{ github.event.inputs.send_notification }}"
          
          need_alert="false"
          alert_level="info"
          alert_reason=""
          
          # 判斷是否需要發送警報
          if [ $health_score -lt 70 ]; then
            need_alert="true"
            alert_level="warning"
            alert_reason="系統健康分數低於70分"
          fi
          
          if [ "$sync_status" = "diverged" ] || [ "$sync_status" = "ptero_missing" ]; then
            need_alert="true"
            alert_level="critical"
            alert_reason="分支同步狀態異常"
          fi
          
          if [ "$send_notification" = "true" ]; then
            need_alert="true"
            alert_reason="手動觸發通知"
          fi
          
          echo "need_alert=$need_alert" >> $GITHUB_OUTPUT
          echo "alert_level=$alert_level" >> $GITHUB_OUTPUT
          echo "alert_reason=$alert_reason" >> $GITHUB_OUTPUT
          
          if [ "$need_alert" = "true" ]; then
            echo "🚨 需要發送警報: $alert_reason (等級: $alert_level)"
          else
            echo "✅ 系統狀態正常，無需警報"
          fi

      - name: 📈 生成趨勢分析
        run: |
          echo "📈 部署趨勢分析..."
          echo "================================"
          
          # 分析最近的部署活動
          ptero_deploy_time="${{ needs.collect-deployment-status.outputs.ptero_deploy_time }}"
          
          if [ "$ptero_deploy_time" != "never" ] && [ "$ptero_deploy_time" != "unknown" ]; then
            # 計算上次部署到現在的時間
            if command -v date >/dev/null 2>&1; then
              if [[ "$ptero_deploy_time" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2} ]]; then
                deploy_timestamp=$(date -d "$ptero_deploy_time" +%s 2>/dev/null || date +%s)
                current_timestamp=$(date +%s)
                hours_since_deploy=$(( (current_timestamp - deploy_timestamp) / 3600 ))
                
                echo "⏰ 上次部署: $hours_since_deploy 小時前"
                
                if [ $hours_since_deploy -lt 24 ]; then
                  echo "✅ 部署活動: 近期活躍"
                elif [ $hours_since_deploy -lt 168 ]; then
                  echo "🟡 部署活動: 本週內有活動"
                else
                  echo "🔴 部署活動: 超過一週未部署"
                fi
              fi
            fi
          else
            echo "❌ 部署活動: 無部署記錄"
          fi
          
          echo "================================"

  # ==========================================
  # 階段 3: 自動修復建議
  # ==========================================
  auto-fix-suggestions:
    name: 🔧 Auto-fix Suggestions
    runs-on: ubuntu-latest
    needs: [collect-deployment-status, generate-monitor-report]
    if: needs.collect-deployment-status.outputs.health_score < 90
    
    steps:
      - name: 🔧 生成自動修復建議
        run: |
          echo "🔧 生成自動修復建議..."
          echo "=================================="
          
          ptero_status="${{ needs.collect-deployment-status.outputs.ptero_status }}"
          sync_status="${{ needs.collect-deployment-status.outputs.sync_status }}"
          health_score="${{ needs.collect-deployment-status.outputs.health_score }}"
          
          echo "📊 當前健康分數: $health_score/100"
          echo ""
          echo "🛠️ 建議的修復操作："
          
          case "$ptero_status" in
            "missing")
              echo "1. 🚨 立即執行: 手動觸發 deploy-to-ptero workflow"
              echo "   命令: 在 GitHub Actions 頁面手動觸發部署"
              echo ""
              ;;
            "incomplete")
              echo "1. ⚠️ 檢查 Ptero 分支文件完整性"
              echo "   命令: 檢查 bot/main.py, requirements.txt 等關鍵文件"
              echo ""
              ;;
          esac
          
          case "$sync_status" in
            "main_ahead")
              echo "2. 📤 建議執行: 部署最新的 Main 分支到 Ptero"
              echo "   操作: 手動觸發 deploy-to-ptero workflow"
              echo "   預期效果: 將健康分數提升 15 分"
              echo ""
              ;;
            "diverged")
              echo "2. 🚨 緊急操作: 修復分支分歧"
              echo "   選項 A: 使用 emergency-ptero-rollback workflow"
              echo "   選項 B: 手動同步分支"
              echo "   預期效果: 將健康分數提升 40 分"
              echo ""
              ;;
          esac
          
          # 提供具體的工作流程觸發連結
          echo "🔗 快速操作連結："
          echo "   部署工作流程: https://github.com/${{ github.repository }}/actions/workflows/deploy-to-ptero.yml"
          echo "   緊急回滾: https://github.com/${{ github.repository }}/actions/workflows/emergency-ptero-rollback.yml"
          echo ""
          
          # 預測修復後的分數
          estimated_score=$health_score
          
          if [ "$ptero_status" = "missing" ]; then
            estimated_score=$((estimated_score + 50))
          elif [ "$ptero_status" = "incomplete" ]; then
            estimated_score=$((estimated_score + 20))
          fi
          
          if [ "$sync_status" = "main_ahead" ]; then
            estimated_score=$((estimated_score + 15))
          elif [ "$sync_status" = "diverged" ]; then
            estimated_score=$((estimated_score + 40))
          fi
          
          if [ $estimated_score -gt 100 ]; then
            estimated_score=100
          fi
          
          echo "📊 修復後預期健康分數: $estimated_score/100"
          echo "=================================="

      - name: 📋 記錄監控結果
        run: |
          echo "📋 記錄本次監控結果到系統日誌..."
          
          # 創建監控日誌條目
          cat > monitor_result.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "health_score": ${{ needs.collect-deployment-status.outputs.health_score }},
            "ptero_status": "${{ needs.collect-deployment-status.outputs.ptero_status }}",
            "main_status": "${{ needs.collect-deployment-status.outputs.main_status }}",
            "sync_status": "${{ needs.collect-deployment-status.outputs.sync_status }}",
            "ptero_commit": "${{ needs.collect-deployment-status.outputs.ptero_commit }}",
            "main_commit": "${{ needs.collect-deployment-status.outputs.main_commit }}",
            "monitor_run_id": "${{ github.run_id }}",
            "check_type": "${{ github.event.inputs.check_type || 'scheduled' }}"
          }
          EOF
          
          echo "✅ 監控結果已記錄"
          echo "📄 監控數據:"
          cat monitor_result.json | python3 -m json.tool

  # ==========================================
  # 階段 4: 通知總結
  # ==========================================
  notification-summary:
    name: 📢 Notification Summary
    runs-on: ubuntu-latest
    needs: [collect-deployment-status, generate-monitor-report, auto-fix-suggestions]
    if: always()
    
    steps:
      - name: 📊 監控總結
        run: |
          echo "📊 部署監控總結報告"
          echo "================================================="
          echo "🕐 監控時間: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "🔄 監控工作流程 ID: ${{ github.run_id }}"
          echo "================================================="
          
          health_score="${{ needs.collect-deployment-status.outputs.health_score }}"
          ptero_status="${{ needs.collect-deployment-status.outputs.ptero_status }}"
          sync_status="${{ needs.collect-deployment-status.outputs.sync_status }}"
          
          echo "📈 系統健康狀況:"
          echo "   健康分數: $health_score/100"
          echo "   Ptero 分支: $ptero_status"
          echo "   同步狀態: $sync_status"
          echo ""
          
          # 狀態說明
          if [ $health_score -ge 90 ]; then
            echo "✅ 系統狀態優秀，無需人工干預"
          elif [ $health_score -ge 70 ]; then
            echo "🟡 系統狀態良好，建議關注"
          elif [ $health_score -ge 50 ]; then
            echo "🟠 系統狀態警告，建議儘快處理"
          else
            echo "🔴 系統狀態危急，需要立即處理"
          fi
          
          echo ""
          echo "📋 下次監控: 30 分鐘後 (自動執行)"
          echo "🔗 監控日誌: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "================================================="