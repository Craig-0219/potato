name: 🛡️ Main Branch Protection - Production Files Only

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, edited]
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_check:
        description: '強制執行完整檢查'
        required: false
        default: true
        type: boolean

env:
  PYTHON_VERSION: '3.10'

jobs:
  # ==========================================
  # 階段 1: 生產檔案合規性檢查
  # ==========================================
  production-compliance-check:
    name: 🔍 Production Files Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📋 生產檔案白名單驗證
        run: |
          echo "🔍 執行生產檔案白名單驗證..."
          
          # 定義生產環境允許的檔案模式
          cat > production_whitelist.txt << 'EOF'
          # 核心程式檔案
          bot/**/*.py
          shared/**/*.py
          web-ui/**/*.js
          web-ui/**/*.ts
          web-ui/**/*.tsx
          web-ui/**/*.json
          web-ui/**/*.css
          web-ui/**/*.html
          
          # 配置檔案
          requirements.txt
          pyproject.toml
          .env.example
          .gitignore
          .gitattributes
          .gitconfig
          
          # 啟動腳本
          start.py
          start.sh
          start.bat
          
          # 文檔 (僅基本文檔)
          README.md
          docs/system/ADMIN_PERMISSION_SETUP.md
          docs/user-guides/COMMANDS.md
          docs/user-guides/USER_MANUAL.md
          
          # CI/CD 流程 (僅生產相關)
          .github/workflows/deploy-to-production.yml
          .github/workflows/deploy-to-ptero.yml
          .github/workflows/emergency-rollback.yml
          .github/workflows/main-branch-protection.yml
          .github/workflows/security-scans.yml
          .github/workflows/smart-change-detection.yml
          .github/workflows/code-quality.yml
          .github/workflows/test-coverage.yml
          EOF
          
          # 定義嚴格禁止的檔案模式
          cat > production_blacklist.txt << 'EOF'
          # 開發工具配置
          .bandit
          .flake8
          .pre-commit-config.yaml
          .safety-policy.json
          .secrets.baseline
          .semgrepignore
          pytest.ini
          
          # 測試檔案
          tests/**/*
          **/test_*.py
          **/*_test.py
          **/*_tests.py
          
          # 開發腳本
          scripts/**/*
          tools/**/*
          
          # 構建檔案
          Dockerfile*
          docker-compose*.yml
          Makefile
          
          # 開發文檔
          docs/development/**/*
          docs/plans/**/*
          docs/archives/**/*
          docs/reports/**/*
          docs/issues/**/*
          DEVELOPMENT*.md
          CONTRIBUTING.md
          
          # 臨時檔案
          *.tmp
          *.temp
          *.log
          *.cache
          .pytest_cache/**/*
          __pycache__/**/*
          *.pyc
          
          # IDE 配置
          .vscode/**/*
          .idea/**/*
          *.swp
          *.swo
          .DS_Store
          
          # 實驗性檔案
          experimental/**/*
          prototype/**/*
          demo/**/*
          sandbox/**/*
          
          # 備份檔案
          *.bak
          *.backup
          *.old
          EOF
          
          echo "✅ 白名單和黑名單準備完成"

      - name: 🔍 檢查禁止檔案
        run: |
          echo "🔍 檢查是否存在禁止的開發檔案..."
          
          violation_found=false
          violations_list=""
          
          # 檢查黑名單中的禁止檔案
          while IFS= read -r pattern; do
            # 跳過註釋和空行
            if [[ "$pattern" =~ ^[[:space:]]*# ]] || [[ -z "$pattern" ]]; then
              continue
            fi
            
            # 檢查檔案是否存在
            if ls $pattern 2>/dev/null | head -1 | grep -q .; then
              echo "❌ 發現禁止的檔案類型: $pattern"
              violations_list="$violations_list\n- $pattern"
              violation_found=true
            fi
          done < production_blacklist.txt
          
          if [ "$violation_found" = true ]; then
            echo "🚨 MAIN 分支汙染檢測！"
            echo "=============================="
            echo "發現以下不應該存在於 main 分支的檔案："
            echo -e "$violations_list"
            echo ""
            echo "💡 解決方案："
            echo "1. 將這些檔案移至 dev 分支"
            echo "2. 或者完全移除這些開發用檔案"
            echo "3. main 分支應該只包含生產環境必需的檔案"
            echo ""
            echo "🚫 PR 被拒絕 - main 分支保護啟動"
            exit 1
          else
            echo "✅ 未發現禁止的檔案類型"
          fi

      - name: 📁 檔案結構合規性檢查
        run: |
          echo "📁 檢查檔案結構是否符合生產標準..."
          
          # 檢查必須存在的核心目錄
          required_dirs=("bot" "shared" "web-ui" ".github/workflows")
          missing_dirs=""
          
          for dir in "${required_dirs[@]}"; do
            if [ ! -d "$dir" ]; then
              echo "❌ 缺少必需目錄: $dir"
              missing_dirs="$missing_dirs $dir"
            else
              echo "✅ 目錄存在: $dir"
            fi
          done
          
          if [ -n "$missing_dirs" ]; then
            echo "🚨 缺少必需的核心目錄: $missing_dirs"
            exit 1
          fi
          
          # 檢查必須存在的核心檔案
          required_files=(
            "bot/main.py"
            "requirements.txt"
            ".env.example"
            "README.md"
            "start.py"
          )
          
          missing_files=""
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ 缺少必需檔案: $file"
              missing_files="$missing_files $file"
            else
              echo "✅ 檔案存在: $file"
            fi
          done
          
          if [ -n "$missing_files" ]; then
            echo "🚨 缺少必需的核心檔案: $missing_files"
            exit 1
          fi
          
          echo "✅ 檔案結構符合生產標準"

      - name: 🧹 代碼品質檢查
        run: |
          echo "🧹 檢查 Python 代碼品質..."
          
          # 安裝檢查工具
          pip install black isort flake8
          
          # 檢查是否有格式問題
          echo "🔍 檢查 Black 格式化..."
          if ! black --check --diff . > black_report.txt 2>&1; then
            echo "❌ 發現代碼格式問題："
            head -20 black_report.txt
            echo "💡 請在 dev 分支中執行 'black .' 修復格式問題"
            exit 1
          fi
          
          echo "🔍 檢查 import 排序..."
          if ! isort --check --diff . > isort_report.txt 2>&1; then
            echo "❌ 發現 import 排序問題："
            head -20 isort_report.txt  
            echo "💡 請在 dev 分支中執行 'isort .' 修復 import 排序"
            exit 1
          fi
          
          echo "✅ 代碼品質檢查通過"

      - name: 📊 生產就緒性評估
        run: |
          echo "📊 評估 main 分支生產就緒性..."
          
          # 統計檔案類型
          total_files=$(find . -type f -not -path "./.git/*" | wc -l)
          python_files=$(find . -name "*.py" -not -path "./.git/*" | wc -l)
          config_files=$(find . -name "*.txt" -o -name "*.toml" -o -name "*.yml" -o -name "*.yaml" | grep -v ".github" | wc -l)
          
          echo "📈 檔案統計："
          echo "  總檔案數: $total_files"
          echo "  Python 檔案: $python_files"  
          echo "  配置檔案: $config_files"
          
          # 檢查是否在合理範圍內 (生產環境應該精簡)
          if [ $total_files -gt 500 ]; then
            echo "⚠️ 警告: 檔案數量過多 ($total_files > 500)"
            echo "💡 建議清理不必要的檔案以保持精簡"
          fi
          
          # 生成生產就緒報告
          echo "✅ Main 分支生產就緒性評估完成"
          echo "📋 評估結果: 符合生產標準"

  # ==========================================  
  # 階段 2: 安全性掃描
  # ==========================================
  security-scan:
    name: 🛡️ Production Security Scan
    runs-on: ubuntu-latest
    needs: production-compliance-check
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🔒 安全漏洞掃描
        run: |
          echo "🔒 執行生產環境安全掃描..."
          
          # 安裝安全掃描工具
          pip install bandit safety
          
          # 掃描 Python 代碼安全問題
          echo "🔍 掃描代碼安全問題..."
          bandit -r bot/ shared/ -f json -o bandit-report.json || true
          
          # 檢查依賴安全
          echo "📦 檢查依賴包安全..."
          safety check --json --output safety-report.json || true
          
          echo "✅ 安全掃描完成"

      - name: 📋 安全報告摘要
        run: |
          echo "📋 生成安全報告摘要..."
          
          if [ -f bandit-report.json ]; then
            high_issues=$(jq '.results | length' bandit-report.json 2>/dev/null || echo "0")
            echo "🔍 代碼安全問題: $high_issues 個"
            
            if [ "$high_issues" -gt 5 ]; then
              echo "⚠️ 警告: 發現較多安全問題，建議修復後再合併"
            fi
          fi
          
          if [ -f safety-report.json ]; then
            vuln_count=$(jq '. | length' safety-report.json 2>/dev/null || echo "0")
            echo "📦 依賴漏洞: $vuln_count 個"
          fi
          
          echo "✅ 安全評估符合生產要求"

  # ==========================================
  # 階段 3: 最終保護決策
  # ==========================================
  protection-decision:
    name: 🎯 Final Protection Decision
    runs-on: ubuntu-latest
    needs: [production-compliance-check, security-scan]
    if: always()

    steps:
      - name: 📊 彙總檢查結果
        run: |
          echo "📊 Main 分支保護檢查結果彙總"
          echo "========================================="
          
          compliance_status="${{ needs.production-compliance-check.result }}"
          security_status="${{ needs.security-scan.result }}"
          
          echo "🔍 檔案合規性檢查: $compliance_status"
          echo "🛡️ 安全掃描: $security_status"
          
          if [ "$compliance_status" = "success" ] && [ "$security_status" = "success" ]; then
            echo ""
            echo "✅ MAIN 分支保護檢查通過"
            echo "🎉 所有檢查均符合生產標準"
            echo "🚀 可以安全合併到 main 分支"
          else
            echo ""
            echo "❌ MAIN 分支保護檢查失敗"
            echo "🚫 PR 被阻止合併到 main 分支"
            echo ""
            echo "💡 修復建議："
            if [ "$compliance_status" != "success" ]; then
              echo "  - 修復檔案合規性問題"
              echo "  - 移除不應存在於生產環境的檔案"
            fi
            if [ "$security_status" != "success" ]; then
              echo "  - 修復安全漏洞"  
              echo "  - 更新有漏洞的依賴包"
            fi
            exit 1
          fi

      - name: 🔔 保護狀態通知
        if: always()
        run: |
          echo "🔔 Main 分支保護狀態通知"
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Main 分支受到完善保護"
            echo "🛡️ 生產檔案完整性已驗證"
            echo "🔒 安全標準符合要求"
          else
            echo "🚨 Main 分支保護啟動"  
            echo "🚫 阻止不符合標準的變更"
            echo "💪 確保生產環境品質"
          fi