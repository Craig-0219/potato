name: 🚀 Simple Production Deploy

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.github/**'
  workflow_dispatch:
    inputs:
      environment:
        description: '部署環境'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

permissions:
  contents: write

jobs:
  deploy:
    name: 🚀 部署到生產環境
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📥 檢出代碼
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🏷️ 生成版本標籤
      id: version
      run: |
        TIMESTAMP=$(date -u '+%Y%m%d-%H%M%S')
        COMMIT_HASH=$(git rev-parse --short HEAD)
        VERSION_TAG="v${TIMESTAMP}-${COMMIT_HASH}"
        echo "tag=$VERSION_TAG" >> $GITHUB_OUTPUT
        echo "📋 版本: $VERSION_TAG"

    - name: 🔍 基本檢查
      run: |
        echo "🔍 檢查核心文件..."
        test -f bot/main.py || { echo "❌ 缺少 bot/main.py"; exit 1; }
        test -f requirements.txt || { echo "❌ 缺少 requirements.txt"; exit 1; }
        test -f start.py || { echo "❌ 缺少 start.py"; exit 1; }
        echo "✅ 核心文件檢查通過"

    - name: 🚀 創建乾淨的部署分支
      run: |
        echo "🚀 準備乾淨的部署環境..."

        # 準備部署目錄
        rm -rf /tmp/ptero-deploy && mkdir -p /tmp/ptero-deploy
        cd /tmp/ptero-deploy

        # 複製核心應用檔案 (排除開發檔案)
        rsync -a --prune-empty-dirs \
          --include='bot/***' \
          --include='shared/***' \
          --include='transcripts/' \
          --exclude='**/__pycache__' \
          --exclude='**/*.pyc' \
          --exclude='**/*.log' \
          --exclude='**/.*' \
          --exclude='tests/' \
          --exclude='.github/' \
          --exclude='docs/' \
          --exclude='*' \
          $GITHUB_WORKSPACE/ ./

        # 複製必要檔案
        cp $GITHUB_WORKSPACE/requirements.txt ./
        cp $GITHUB_WORKSPACE/start.py ./ 2>/dev/null || echo "start.py not found"
        cp $GITHUB_WORKSPACE/start.sh ./ 2>/dev/null || echo "start.sh not found"
        cp $GITHUB_WORKSPACE/start.bat ./ 2>/dev/null || echo "start.bat not found"
        cp $GITHUB_WORKSPACE/.env.example ./ 2>/dev/null || echo "Creating .env.example"

        # 如果沒有 .env.example，創建基本的
        if [ ! -f .env.example ]; then
          cat > .env.example << 'EOF'
        # Discord Bot Token
        DISCORD_TOKEN=your_discord_bot_token_here

        # Database Configuration
        DB_HOST=localhost
        DB_PORT=3306
        DB_USER=your_db_user
        DB_PASSWORD=your_db_password  # pragma: allowlist secret
        DB_NAME=potato_bot

        # API Server Configuration
        ENABLE_API_SERVER=true
        API_EXTERNAL_ACCESS=true
        LOCAL_API_HOST=0.0.0.0
        LOCAL_API_PORT=8080

        # Basic Settings
        DEBUG=false
        LOG_LEVEL=INFO
        EOF
        fi

        # 設置執行權限
        chmod +x start.py 2>/dev/null || true
        chmod +x start.sh 2>/dev/null || true

        # 配置 Git 並推送
        git init
        git config user.email "action@github.com"
        git config user.name "GitHub Action"
        git remote add origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
        git add .

        DEPLOY_MSG="🚀 自動部署 (main → ptero) ${{ steps.version.outputs.tag }}

        📅 時間: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        🔗 提交: ${{ github.sha }}
        👤 觸發: ${{ github.actor }}

        ✨ 乾淨部署版本 - 僅包含運行必要檔案"

        git commit -m "$DEPLOY_MSG"
        git push origin HEAD:ptero --force

        echo "✅ 部署完成"

    - name: 📊 部署統計
      run: |
        echo "📊 部署統計"
        echo "==================="
        echo "版本: ${{ steps.version.outputs.tag }}"
        echo "分支: main → ptero"
        echo "提交: $(git rev-parse --short HEAD)"
        echo "時間: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "環境: ${{ github.event.inputs.environment || 'production' }}"
