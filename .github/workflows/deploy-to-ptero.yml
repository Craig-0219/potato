name: 🚀 Deploy to Ptero Branch

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: '強制部署到 ptero 分支'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.10'
  TARGET_BRANCH: 'ptero'

jobs:
  # ==========================================
  # 階段 1: 部署前驗證
  # ==========================================
  pre-deployment-validation:
    name: 🔍 Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.decision.outputs.should_deploy }}
      commit_sha: ${{ steps.info.outputs.commit_sha }}

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: 📊 收集部署資訊
        id: info
        run: |
          echo "commit_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "commit_message=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT
          echo "author=${{ github.actor }}" >> $GITHUB_OUTPUT
          
          echo "🔍 部署資訊："
          echo "  Commit: ${{ github.sha }}"
          echo "  作者: ${{ github.actor }}"
          echo "  分支: main → ptero"

      - name: 🎯 部署決策
        id: decision
        run: |
          should_deploy="true"
          
          # 手動觸發總是部署
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "手動觸發部署"
            should_deploy="true"
          fi
          
          # 檢查是否為合併提交
          if git log -1 --pretty=%B | grep -i "merge\|合併" > /dev/null; then
            echo "偵測到合併提交，執行部署"
            should_deploy="true"
          fi
          
          echo "should_deploy=$should_deploy" >> $GITHUB_OUTPUT
          echo "🎯 部署決策: $should_deploy"

  # ==========================================
  # 階段 2: 快速品質檢查
  # ==========================================
  quality-check:
    name: ⚡ Quick Quality Check
    runs-on: ubuntu-latest
    needs: pre-deployment-validation
    if: needs.pre-deployment-validation.outputs.should_deploy == 'true'

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 🔍 語法檢查
        run: |
          echo "🔍 執行 Python 語法檢查..."
          python -m py_compile bot/main.py
          python -c "
          import os
          import py_compile
          
          for root, dirs, files in os.walk('.'):
              if '.git' in root:
                  continue
              for file in files:
                  if file.endswith('.py'):
                      filepath = os.path.join(root, file)
                      try:
                          py_compile.compile(filepath, doraise=True)
                      except Exception as e:
                          print(f'語法錯誤: {filepath}: {e}')
                          exit(1)
          print('✅ 所有 Python 檔案語法檢查通過')
          "

      - name: 📝 檢查必要檔案
        run: |
          echo "📝 檢查部署必要檔案..."
          
          required_files=("bot/main.py" "requirements.txt" ".env.example" "start.py")
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ 缺少必要檔案: $file"
              exit 1
            else
              echo "✅ $file"
            fi
          done
          
          echo "✅ 所有必要檔案存在"

  # ==========================================
  # 階段 3: 部署到 ptero 分支
  # ==========================================
  deploy-to-ptero:
    name: 🚀 Deploy to Ptero Branch
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, quality-check]
    if: needs.pre-deployment-validation.outputs.should_deploy == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 配置 Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 🌿 準備 ptero 分支
        run: |
          echo "🌿 準備 ptero 分支..."
          
          # 檢查 ptero 分支是否存在
          if git show-ref --verify --quiet refs/remotes/origin/ptero; then
            echo "ptero 分支已存在，切換並更新"
            git checkout ptero
            git pull origin ptero || echo "ptero 分支拉取失敗，繼續執行"
          else
            echo "建立新的 ptero 分支"
            git checkout -b ptero
          fi
          
          echo "✅ ptero 分支準備完成"

      - name: 🔄 同步 main 內容到 ptero
        run: |
          echo "🔄 同步 main 分支內容..."
          
          # 切換到 main 分支獲取最新內容
          git checkout main
          git pull origin main
          
          # 切回 ptero 並合併 main 的變更
          git checkout ptero
          
          # 使用 merge 策略同步內容
          if git merge main --no-edit; then
            echo "✅ 成功合併 main 分支到 ptero"
          else
            echo "❌ 合併衝突，嘗試覆蓋策略..."
            git merge --abort
            
            # 使用強制覆蓋策略
            git reset --hard main
            echo "✅ 使用覆蓋策略同步完成"
          fi

      - name: 🎯 優化 ptero 分支內容
        run: |
          echo "🎯 優化 ptero 分支內容..."
          
          # 確保只包含生產必需檔案
          if [ -f "pyproject.toml" ]; then
            echo "保留 pyproject.toml"
          fi
          
          # 建立部署資訊檔案
          cat > DEPLOYMENT_INFO.md << EOF
          # 🚀 Ptero 部署資訊
          
          **部署時間**: $(date -u +%Y-%m-%dT%H:%M:%SZ)
          **源分支**: main
          **Commit**: ${{ needs.pre-deployment-validation.outputs.commit_sha }}
          **部署者**: ${{ github.actor }}
          **觸發事件**: ${{ github.event_name }}
          
          ---
          
          此分支專為 Pterodactyl 託管環境優化，包含純淨的生產代碼。
          EOF
          
          echo "✅ ptero 分支優化完成"

      - name: 📤 推送到 ptero 分支
        run: |
          echo "📤 推送到 ptero 分支..."
          
          # 添加所有變更
          git add -A
          
          # 檢查是否有變更需要提交
          if git diff --staged --quiet; then
            echo "沒有變更需要提交"
          else
            git commit -m "🚀 自動部署從 main 分支

            源 Commit: ${{ needs.pre-deployment-validation.outputs.commit_sha }}
            部署時間: $(date -u +%Y-%m-%dT%H:%M:%SZ)
            部署者: ${{ github.actor }}
            
            🤖 自動部署系統"
          fi
          
          # 推送到遠程 ptero 分支
          git push origin ptero
          
          echo "✅ 成功推送到 ptero 分支"

  # ==========================================
  # 階段 4: 部署後驗證和通知
  # ==========================================
  post-deployment:
    name: 📢 Post-deployment Notification
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, deploy-to-ptero]
    if: always() && needs.pre-deployment-validation.outputs.should_deploy == 'true'

    steps:
      - name: 📊 部署狀態總結
        run: |
          echo "📊 Ptero 部署狀態總結"
          echo "===================="
          echo "🎯 目標分支: ptero"
          echo "🔗 源 Commit: ${{ needs.pre-deployment-validation.outputs.commit_sha }}"
          echo "👤 部署者: ${{ github.actor }}"
          echo "📅 部署時間: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "🚀 觸發方式: ${{ github.event_name }}"
          
          if [ "${{ needs.deploy-to-ptero.result }}" = "success" ]; then
            echo "✅ 狀態: 部署成功"
            echo "🎉 main 分支已成功部署到 ptero 分支！"
            echo "🌐 託管環境應該會自動更新"
          else
            echo "❌ 狀態: 部署失敗"
            echo "💥 部署過程中發生錯誤，請檢查日誌"
          fi

      - name: 📈 更新部署統計
        if: needs.deploy-to-ptero.result == 'success'
        run: |
          echo "📈 更新部署統計..."
          echo "  📊 成功部署到 ptero: +1"
          echo "  ⏱️ 部署 ID: ${{ github.run_id }}"
          echo "  📅 最後成功部署: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "✅ 統計已更新"