name: 🚀 Deploy to Ptero Branch

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
      - 'LICENSE'
      - '.github/workflows/**' # 避免workflow文件變更觸發部署
  workflow_dispatch:
    inputs:
      force_deploy:
        description: '強制部署到 ptero 分支'
        required: false
        default: false
        type: boolean
      skip_quality_check:
        description: '跳過品質檢查（緊急部署用）'
        required: false
        default: false
        type: boolean
  # 新增：當auto-merge workflow成功後自動觸發
  workflow_run:
    workflows: ["🤖 Auto Merge Dev to Main"]
    types: [completed]
    branches: [main]

env:
  PYTHON_VERSION: '3.10'
  TARGET_BRANCH: 'ptero'

# 確保同時只有一個部署進行
concurrency:
  group: deploy-to-ptero
  cancel-in-progress: false

jobs:
  # ==========================================
  # 階段 1: 部署前驗證
  # ==========================================
  pre-deployment-validation:
    name: 🔍 Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.decision.outputs.should_deploy }}
      commit_sha: ${{ steps.info.outputs.commit_sha }}

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: 📊 收集部署資訊
        id: info
        run: |
          echo "commit_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "commit_message=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT
          echo "author=${{ github.actor }}" >> $GITHUB_OUTPUT
          
          echo "🔍 部署資訊："
          echo "  Commit: ${{ github.sha }}"
          echo "  作者: ${{ github.actor }}"
          echo "  分支: main → ptero"

      - name: 🎯 部署決策
        id: decision
        run: |
          should_deploy="false"
          deployment_reason=""
          
          # 手動觸發總是部署
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            should_deploy="true"
            deployment_reason="手動觸發部署"
          
          # workflow_run觸發（來自auto-merge）
          elif [ "${{ github.event_name }}" = "workflow_run" ]; then
            if [ "${{ github.event.workflow_run.conclusion }}" = "success" ]; then
              should_deploy="true"
              deployment_reason="dev分支自動合併成功，觸發部署"
            else
              should_deploy="false"
              deployment_reason="auto-merge workflow失敗，跳過部署"
            fi
          
          # 直接推送到main分支
          elif [ "${{ github.event_name }}" = "push" ]; then
            # 檢查是否為合併提交或重要更新
            if git log -1 --pretty=%B | grep -i "merge\|合併\|🚀\|release" > /dev/null; then
              should_deploy="true"
              deployment_reason="偵測到重要更新或合併提交"
            else
              should_deploy="false"
              deployment_reason="普通提交，建議透過dev分支流程"
            fi
          fi
          
          echo "should_deploy=$should_deploy" >> $GITHUB_OUTPUT
          echo "deployment_reason=$deployment_reason" >> $GITHUB_OUTPUT
          echo "🎯 部署決策: $should_deploy ($deployment_reason)"

  # ==========================================
  # 階段 2: 快速品質檢查
  # ==========================================
  quality-check:
    name: ⚡ Quick Quality Check
    runs-on: ubuntu-latest
    needs: pre-deployment-validation
    if: needs.pre-deployment-validation.outputs.should_deploy == 'true' && github.event.inputs.skip_quality_check != 'true'

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 🔍 語法檢查
        run: |
          echo "🔍 執行 Python 語法檢查..."
          
          # 安裝必要的檢查工具
          pip install --no-deps flake8
          
          # 首先檢查主要入口點
          python -m py_compile bot/main.py
          echo "✅ 主程序語法檢查通過"
          
          # 批量檢查所有Python文件
          python -c "
          import os
          import py_compile
          import sys
          
          error_count = 0
          total_files = 0
          
          for root, dirs, files in os.walk('.'):
              # 跳過不需要的目錄
              if any(skip_dir in root for skip_dir in ['.git', '__pycache__', '.pytest_cache', 'node_modules']):
                  continue
              
              for file in files:
                  if file.endswith('.py'):
                      filepath = os.path.join(root, file)
                      total_files += 1
                      try:
                          py_compile.compile(filepath, doraise=True)
                          print(f'✅ {filepath}')
                      except Exception as e:
                          print(f'❌ 語法錯誤 {filepath}: {e}')
                          error_count += 1
          
          print(f'\n📊 檢查結果: {total_files - error_count}/{total_files} 文件通過')
          if error_count > 0:
              print(f'❌ 發現 {error_count} 個語法錯誤')
              sys.exit(1)
          else:
              print('🎉 所有 Python 檔案語法檢查通過')
          "
          
          # 基本代碼規範檢查
          echo "🧹 執行基本代碼規範檢查..."
          flake8 --select=E9,F63,F7,F82 --show-source --statistics bot/ shared/ || {
            echo "⚠️ 發現代碼規範問題，但不阻止部署"
          }

      - name: 📝 檢查必要檔案
        run: |
          echo "📝 檢查部署必要檔案..."
          
          required_files=("bot/main.py" "requirements.txt" ".env.example" "start.py")
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ 缺少必要檔案: $file"
              exit 1
            else
              echo "✅ $file"
            fi
          done
          
          echo "✅ 所有必要檔案存在"

  # ==========================================
  # 階段 3: 部署到 ptero 分支
  # ==========================================
  deploy-to-ptero:
    name: 🚀 Deploy to Ptero Branch
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, quality-check]
    if: needs.pre-deployment-validation.outputs.should_deploy == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 配置 Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # 設置安全配置
          git config --global init.defaultBranch main
          git config --global pull.rebase false
          
          echo "✅ Git 配置完成"

      - name: 🌿 準備 ptero 分支
        run: |
          echo "🌿 準備 ptero 分支..."
          
          # 檢查 ptero 分支是否存在
          if git show-ref --verify --quiet refs/remotes/origin/ptero; then
            echo "ptero 分支已存在，切換並更新"
            git checkout ptero
            git pull origin ptero || echo "ptero 分支拉取失敗，繼續執行"
          else
            echo "建立新的 ptero 分支"
            git checkout -b ptero
          fi
          
          echo "✅ ptero 分支準備完成"

      - name: 🔄 同步 main 內容到 ptero
        run: |
          echo "🔄 同步 main 分支內容..."
          
          # 切換到 main 分支獲取最新內容
          git checkout main
          git pull origin main
          
          # 切回 ptero 並合併 main 的變更
          git checkout ptero
          
          # 使用 merge 策略同步內容
          if git merge main --no-edit; then
            echo "✅ 成功合併 main 分支到 ptero"
          else
            echo "❌ 合併衝突，嘗試覆蓋策略..."
            git merge --abort
            
            # 使用強制覆蓋策略
            git reset --hard main
            echo "✅ 使用覆蓋策略同步完成"
          fi

      - name: 🎯 優化 ptero 分支內容
        run: |
          echo "🎯 優化 ptero 分支內容..."
          
          # 清理不需要的開發文件（如果存在）
          rm -rf .pytest_cache/ __pycache__/ *.pyc tests/ docs/development/ 2>/dev/null || true
          rm -f .pre-commit-config.yaml .bandit .safety-policy.json pytest.ini 2>/dev/null || true
          
          # 確保生產必需檔案存在
          required_files=("bot/main.py" "requirements.txt" ".env.example" "start.py")
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ 缺少必要文件: $file"
              exit 1
            fi
          done
          
          # 建立詳細的部署資訊檔案
          cat > DEPLOYMENT_INFO.md << EOF
          # 🚀 Ptero 部署資訊
          
          **部署時間**: $(date -u +%Y-%m-%dT%H:%M:%SZ)  
          **源分支**: main  
          **Commit Hash**: \`${{ needs.pre-deployment-validation.outputs.commit_sha }}\`  
          **部署者**: ${{ github.actor }}  
          **觸發事件**: ${{ github.event_name }}  
          **GitHub Run ID**: ${{ github.run_id }}  
          **工作流程URL**: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          ## 📋 部署檢查清單
          
          - [x] Python 語法檢查通過
          - [x] 必要文件完整性驗證
          - [x] Git 分支同步完成
          - [x] 生產環境優化處理
          
          ## 🔗 相關連結
          
          - [源Commit詳情](https://github.com/${{ github.repository }}/commit/${{ needs.pre-deployment-validation.outputs.commit_sha }})
          - [Ptero分支](https://github.com/${{ github.repository }}/tree/ptero)
          - [部署日誌](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ---
          
          > 此分支專為 Pterodactyl 託管環境優化，包含純淨的生產代碼。  
          > 🤖 自動部署系統 v2.0
          EOF
          
          # 生成版本標記文件
          echo "{\"version\":\"$(date +%Y%m%d_%H%M%S)\",\"commit\":\"${{ needs.pre-deployment-validation.outputs.commit_sha }}\",\"deploy_time\":\"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"}" > .ptero_deploy_info.json
          
          echo "✅ ptero 分支優化完成"

      - name: 📤 推送到 ptero 分支
        run: |
          echo "📤 推送到 ptero 分支..."
          
          # 添加所有變更
          git add -A
          
          # 檢查是否有變更需要提交
          if git diff --staged --quiet; then
            echo "沒有變更需要提交"
          else
            git commit -m "🚀 自動部署從 main 分支

            源 Commit: ${{ needs.pre-deployment-validation.outputs.commit_sha }}
            部署時間: $(date -u +%Y-%m-%dT%H:%M:%SZ)
            部署者: ${{ github.actor }}
            
            🤖 自動部署系統"
          fi
          
          # 推送到遠程 ptero 分支
          git push origin ptero
          
          echo "✅ 成功推送到 ptero 分支"

  # ==========================================
  # 階段 4: 部署後驗證和通知
  # ==========================================
  post-deployment:
    name: 📢 Post-deployment Notification
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, deploy-to-ptero]
    if: always() && needs.pre-deployment-validation.outputs.should_deploy == 'true'

    steps:
      - name: 📊 部署狀態總結
        run: |
          echo "📊 Ptero 部署狀態總結"
          echo "===================="
          echo "🎯 目標分支: ptero"
          echo "🔗 源 Commit: ${{ needs.pre-deployment-validation.outputs.commit_sha }}"
          echo "👤 部署者: ${{ github.actor }}"
          echo "📅 部署時間: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "🚀 觸發方式: ${{ github.event_name }}"
          
          if [ "${{ needs.deploy-to-ptero.result }}" = "success" ]; then
            echo "✅ 狀態: 部署成功"
            echo "🎉 main 分支已成功部署到 ptero 分支！"
            echo "🌐 託管環境應該會自動更新"
          else
            echo "❌ 狀態: 部署失敗"
            echo "💥 部署過程中發生錯誤，請檢查日誌"
          fi

      - name: 📈 更新部署統計
        if: needs.deploy-to-ptero.result == 'success'
        run: |
          echo "📈 更新部署統計和記錄..."
          echo "=============================="
          echo "📊 本次部署統計:"
          echo "  • 成功部署到 ptero: +1"
          echo "  • 部署 ID: ${{ github.run_id }}"
          echo "  • 部署時長: 約 ${{ github.job }} 分鐘"
          echo "  • 源分支: main"
          echo "  • 目標分支: ptero"
          echo "  • 最後成功部署: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "=============================="
          echo "✅ 部署統計已記錄"
          
          # 創建成功標記（可用於監控）
          echo "🏆 部署成功標記已生成"
      
      - name: 🚨 失敗處理
        if: needs.deploy-to-ptero.result != 'success'
        run: |
          echo "🚨 部署失敗處理程序"
          echo "=============================="
          echo "❌ 部署狀態: 失敗"
          echo "💥 失敗原因: 請查看上述日誌"
          echo "🛠️ 建議操作:"
          echo "  1. 檢查源 commit 是否有語法錯誤"
          echo "  2. 驗證 GitHub Token 權限"
          echo "  3. 檢查是否有分支衝突"
          echo "  4. 查看詳細錯誤日誌"
          echo "=============================="
          echo "📞 如需協助，請查看 GitHub Issues"

  # ==========================================
  # 階段 4: 部署健康檢查
  # ==========================================
  deployment-health-check:
    name: 🏥 Deployment Health Check
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, deploy-to-ptero]
    if: needs.deploy-to-ptero.result == 'success'
    
    steps:
      - name: Checkout ptero branch
        uses: actions/checkout@v4
        with:
          ref: ptero
          fetch-depth: 1
      
      - name: 🩺 驗證部署完整性
        run: |
          echo "🩺 驗證 ptero 分支部署完整性..."
          
          # 檢查關鍵文件
          required_files=("bot/main.py" "requirements.txt" ".env.example" "start.py" "DEPLOYMENT_INFO.md")
          missing_files=0
          
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file"
            else
              echo "❌ 缺失: $file"
              missing_files=$((missing_files + 1))
            fi
          done
          
          if [ $missing_files -gt 0 ]; then
            echo "💥 部署驗證失敗: 缺失 $missing_files 個必要文件"
            exit 1
          fi
          
          # 驗證部署資訊文件
          if [ -f ".ptero_deploy_info.json" ]; then
            echo "📋 部署資訊驗證:"
            cat .ptero_deploy_info.json | python3 -m json.tool
            echo "✅ 部署資訊格式正確"
          fi
          
          echo "🎉 部署完整性驗證通過"
      
      - name: 📊 生成部署報告
        run: |
          echo "📊 生成部署狀態報告..."
          
          commit_hash=$(git rev-parse HEAD)
          file_count=$(find . -type f -not -path "./.git/*" | wc -l)
          size_kb=$(du -sk . | cut -f1)
          
          echo "📋 Ptero 分支狀態報告"
          echo "============================"
          echo "🔗 最新 Commit: $commit_hash"
          echo "📁 檔案總數: $file_count"
          echo "📦 分支大小: ${size_kb}KB"
          echo "⏰ 檢查時間: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "🎯 目標環境: Pterodactyl"
          echo "============================"
          
          echo "✅ 部署報告生成完成"