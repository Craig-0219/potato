name: 🚀 Deploy to Ptero Branch

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  deploy-to-ptero:
    name: 🚀 Deploy to Ptero Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com" # pragma: allowlist secret

      - name: Create clean ptero deployment
        run: |
          # 創建並切換到 ptero 分支
          git checkout -B ptero

          # 移除不需要的開發文件
          rm -rf .github/workflows
          rm -rf tests/
          rm -rf docs/
          rm -rf scripts/
          rm -rf .pre-commit-config.yaml
          rm -rf .coveragerc
          rm -rf .bandit
          rm -rf .safety-policy.json
          rm -rf .semgrepignore
          rm -rf .secrets.baseline
          rm -rf CI_CD_*.md
          rm -rf IMPLEMENTATION_PLAN.md
          rm -rf NEXT_PHASE_DEVELOPMENT_PLAN.md
          rm -rf PRIORITY_MATRIX.md
          rm -rf PHASE_COMPLETION_SUMMARY.md
          rm -rf DEV_WORKFLOWS_ENHANCEMENT_PLAN.md
          rm -rf test_*.py
          rm -rf trigger_merge.txt
          rm -rf bandit-report.json
          rm -rf security_reports

          # 清理 Python 編譯文件和日誌
          find . -name "*.pyc" -delete
          find . -name "*.log" -delete
          find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
          find . -name ".pytest_cache" -type d -exec rm -rf {} + 2>/dev/null || true
          
          # 移除任何意外的文檔文件
          find . -name "*.md" -not -path "./README.md" -delete 2>/dev/null || true

          # 確保必要的啟動文件有執行權限
          chmod +x start.sh 2>/dev/null || true
          chmod +x start.py 2>/dev/null || true

          # 生成版本信息
          echo "# Potato Discord Bot - Production Version" > VERSION
          echo "Version: $(date '+%Y.%m.%d')" >> VERSION
          echo "Build: $(git rev-parse --short HEAD)" >> VERSION
          echo "Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> VERSION
          echo "Source: main branch" >> VERSION

          # 確保 .env.example 存在
          if [ ! -f .env.example ]; then
            echo "# Potato Discord Bot Environment Configuration" > .env.example
            echo "DISCORD_TOKEN=your_discord_bot_token_here" >> .env.example
            echo "DATABASE_URL=postgresql://user:password@localhost:5432/potato_bot" >> .env.example
            echo "REDIS_URL=redis://localhost:6379" >> .env.example
          fi

      - name: Commit and push to ptero
        run: |
          git add .
          git commit -m "🚀 部署到 Ptero 分支 - $(date '+%Y-%m-%d %H:%M:%S')

          📦 版本: $(date '+%Y.%m.%d')
          🔗 來源: main 分支 ($(git log main -1 --format='%h'))

          ✅ 部署內容:
          • 完整 Bot 核心文件 (bot/)
          • 共用模組和配置 (shared/)
          • 跨平台啟動工具
          • 生產環境依賴
          • 環境配置範例

          🛡️ 安全保證:
          • 移除所有開發和測試文件
          • 無敏感資料
          • 生產就緒版本" || echo "No changes to commit"

          git push origin ptero --force

      - name: Deployment summary
        run: |
          echo "✅ 部署完成！"
          echo "📦 Ptero 分支已更新"
          echo "🔗 來源: main 分支 $(git log main -1 --format='%h - %s')"
          echo "⏰ 部署時間: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
