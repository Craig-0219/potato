name: 🤖 Auto Merge

on:
  pull_request:
    types: [labeled, unlabeled, synchronize, ready_for_review]
  pull_request_review:
    types: [submitted]
  workflow_run:
    workflows: ["🚀 CI Pipeline"]
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  auto-merge:
    name: 🚀 自動合併檢查
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success'
    
    steps:
    - name: 🔍 獲取 PR 信息
      id: pr-info
      uses: actions/github-script@v6
      with:
        script: |
          let prData;
          
          if (context.eventName === 'pull_request') {
            prData = context.payload.pull_request;
          } else if (context.eventName === 'pull_request_review') {
            prData = context.payload.pull_request;
          } else if (context.eventName === 'workflow_run') {
            // 查找關聯的 PR
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${context.payload.workflow_run.head_branch}`
            });
            
            if (prs.data.length === 0) {
              console.log('未找到關聯的 PR');
              return { shouldSkip: true };
            }
            
            prData = prs.data[0];
          }
          
          return {
            number: prData.number,
            title: prData.title,
            author: prData.user.login,
            baseBranch: prData.base.ref,
            headBranch: prData.head.ref,
            draft: prData.draft,
            mergeable: prData.mergeable,
            shouldSkip: false
          };
    
    - name: 🏷️ 檢查自動合併條件
      id: check-conditions
      if: fromJSON(steps.pr-info.outputs.result).shouldSkip != true
      uses: actions/github-script@v6
      with:
        script: |
          const prInfo = ${{ steps.pr-info.outputs.result }};
          
          // 獲取 PR 標籤
          const { data: labels } = await github.rest.issues.listLabelsOnIssue({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prInfo.number
          });
          
          const labelNames = labels.map(label => label.name);
          console.log(`PR 標籤: ${labelNames.join(', ')}`);
          
          // 檢查自動合併標籤
          const hasAutoMergeLabel = labelNames.some(label => 
            ['auto-merge', '🤖 auto-merge', 'ready-to-merge'].includes(label)
          );
          
          // 檢查阻擋標籤
          const hasBlockingLabel = labelNames.some(label => 
            ['do-not-merge', '❌ do-not-merge', 'work-in-progress', 'needs-review'].includes(label)
          );
          
          // 檢查草稿狀態
          if (prInfo.draft) {
            return { canMerge: false, reason: 'PR 仍為草稿狀態' };
          }
          
          if (!hasAutoMergeLabel) {
            return { canMerge: false, reason: '未設置自動合併標籤' };
          }
          
          if (hasBlockingLabel) {
            return { canMerge: false, reason: '存在阻擋標籤' };
          }
          
          // 檢查審查要求 (簡化邏輯)
          const { data: reviews } = await github.rest.pulls.listReviews({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: prInfo.number
          });
          
          const latestReviews = {};
          reviews.forEach(review => {
            latestReviews[review.user.login] = review.state;
          });
          
          const approvals = Object.values(latestReviews).filter(state => state === 'APPROVED').length;
          const rejections = Object.values(latestReviews).filter(state => state === 'REQUEST_CHANGES').length;
          
          // 根據目標分支決定審查要求
          let requiredApprovals = 0;
          if (prInfo.baseBranch === 'main') {
            requiredApprovals = 1;  // main 分支需要 1 個批准
          }
          
          if (rejections > 0) {
            return { canMerge: false, reason: `存在 ${rejections} 個拒絕審查` };
          }
          
          if (approvals < requiredApprovals) {
            return { canMerge: false, reason: `審查不足 (需要: ${requiredApprovals}, 當前: ${approvals})` };
          }
          
          return { 
            canMerge: true, 
            reason: '符合自動合併條件',
            approvals: approvals,
            requiredApprovals: requiredApprovals
          };
    
    - name: 🚀 執行自動合併
      if: fromJSON(steps.check-conditions.outputs.result).canMerge == true
      uses: actions/github-script@v6
      with:
        script: |
          const prInfo = ${{ steps.pr-info.outputs.result }};
          
          try {
            // 啟用自動合併 (使用 GitHub 原生功能)
            await github.rest.pulls.enableAutoMerge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prInfo.number,
              merge_method: prInfo.baseBranch === 'main' ? 'squash' : 'merge'
            });
            
            console.log(`✅ 已啟用 PR #${prInfo.number} 的自動合併`);
            
            // 添加成功評論
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prInfo.number,
              body: `🤖 **自動合併已啟用**
              
✅ 所有檢查通過後將自動合併到 \`${prInfo.baseBranch}\` 分支
🔄 合併方式: ${prInfo.baseBranch === 'main' ? 'Squash' : 'Merge'}
              
感謝 @${prInfo.author} 的貢獻！ 🚀`
            });
            
          } catch (error) {
            console.error('自動合併設置失敗:', error);
            
            // 添加失敗評論
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prInfo.number,
              body: `❌ **自動合併設置失敗**
              
錯誤: ${error.message}
              
請檢查 PR 狀態或手動處理合併。`
            });
            
            throw error;
          }
    
    - name: 📋 結果總結
      if: always() && fromJSON(steps.pr-info.outputs.result).shouldSkip != true
      run: |
        echo "🤖 自動合併檢查完成"
        echo ""
        
        CONDITIONS='${{ steps.check-conditions.outputs.result }}'
        
        if [[ "$CONDITIONS" == *'"canMerge":true'* ]]; then
          echo "✅ 自動合併條件: 符合"
          echo "🚀 狀態: 已啟用自動合併"
        else
          echo "❌ 自動合併條件: 不符合"
          REASON=$(echo "$CONDITIONS" | jq -r '.reason // "未知原因"')
          echo "📝 原因: $REASON"
          echo ""
          echo "💡 如需啟用自動合併:"
          echo "1. 添加 'auto-merge' 標籤"
          echo "2. 確保所有 CI 檢查通過"
          echo "3. 獲得必要的代碼審查批准"
          echo "4. 移除任何阻擋標籤 (do-not-merge 等)"
        fi