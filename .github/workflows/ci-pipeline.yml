name: 🚀 CI Pipeline

on:
  push:
    branches: [main, develop, dev]
  pull_request:
    branches: [main, develop, dev]

env:
  PYTHON_VERSION: '3.10'
  
jobs:
  # 快速變更檢測 - 使用成熟的 paths-filter
  detect-changes:
    name: 🔍 偵測變更
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.changes.outputs.code }}
      tests: ${{ steps.changes.outputs.tests }}
      docs: ${{ steps.changes.outputs.docs }}
      config: ${{ steps.changes.outputs.config }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          code:
            - 'src/**/*.py'
          tests:
            - 'tests/**/*'
          docs:
            - '**/*.md'
            - 'docs/**/*'
          config:
            - 'requirements.txt'
            - 'pyproject.toml'
            - '.github/**/*'

  # 品質檢查閘門 - 整合多項檢查
  quality-gate:
    name: ⚡ 品質檢查閘門
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.code == 'true' || needs.detect-changes.outputs.config == 'true'
    timeout-minutes: 10
    
    steps:
    - name: 📥 檢出程式碼
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Semgrep 需要完整歷史
    
    - name: 🐍 設置 Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 安裝品質工具
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 bandit safety pip-audit
    
    - name: 🎨 代碼格式檢查
      continue-on-error: true
      run: |
        echo "🔍 執行代碼格式檢查..."
        black --check --diff src/ || echo "⚠️ Black 格式檢查發現問題，但繼續執行"
        echo "📝 檢查 import 排序..."
        isort --check-only --diff src/ || echo "⚠️ isort 檢查發現問題，但繼續執行"
        echo "✨ 檢查代碼風格..."
        flake8 src/ || echo "⚠️ Flake8 檢查發現問題，但繼續執行"
        echo "💡 建議：運行 'black src/' 和 'isort src/' 來修復格式問題"
    
    - name: 🛡️ Bandit 安全掃描
      continue-on-error: true
      run: |
        echo "🔒 執行 Python 安全掃描..."
        bandit -r src/ -f json -o bandit-report.json || echo "⚠️ Bandit 掃描發現問題，但繼續執行"
        bandit -r src/ -f txt || echo "⚠️ Bandit 文字報告生成失敗，但繼續執行"
        
        # 檢查高風險問題
        if [ -f "bandit-report.json" ]; then
          HIGH_ISSUES=$(jq '.results[] | select(.issue_severity == "HIGH") | length' bandit-report.json 2>/dev/null | wc -l)
          if [ "$HIGH_ISSUES" -gt 0 ]; then
            echo "⚠️ 發現 $HIGH_ISSUES 個高風險安全問題"
            echo "::warning::發現 $HIGH_ISSUES 個高風險安全問題，建議修復"
          else
            echo "✅ 未發現高風險安全問題"
          fi
        else
          echo "⚠️ Bandit 報告文件未生成，跳過風險分析"
        fi
    
    - name: 🔍 Semgrep 靜態分析
      continue-on-error: true
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/python
          p/security-audit
          p/owasp-top-ten
          p/django
        generateSarif: "1"
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    
    - name: 🚨 依賴安全掃描
      continue-on-error: true
      run: |
        echo "🔒 執行依賴安全掃描..."
        # 安裝項目依賴以進行掃描
        pip install -r requirements.txt || echo "⚠️ 依賴安裝失敗，但繼續執行"
        
        # Safety 掃描
        safety check --json --output safety-report.json || echo "⚠️ Safety 掃描發現問題，但繼續執行"
        
        # Pip-audit 掃描  
        pip-audit --format=json --output=pip-audit-report.json || echo "⚠️ Pip-audit 掃描發現問題，但繼續執行"
        pip-audit --format=columns || echo "⚠️ 依賴掃描發現問題，但繼續執行"
        
        echo "💡 建議：檢查生成的安全報告並修復發現的漏洞"
    
    - name: 📊 上傳安全報告
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json
    
    - name: 📋 品質檢查總結
      if: always()
      run: |
        echo "⚡ 品質檢查閘門執行完成"
        echo "✅ 代碼格式檢查: 完成"
        echo "🛡️ Bandit 安全掃描: 完成"  
        echo "🔍 Semgrep 靜態分析: 完成"
        echo "🚨 依賴安全掃描: 完成"

  # 測試套件 - 大幅簡化
  test-suite:
    name: 🧪 測試套件
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.code == 'true' || needs.detect-changes.outputs.tests == 'true'
    timeout-minutes: 20
    
    steps:
    - name: 📥 檢出程式碼
      uses: actions/checkout@v4
    
    - name: 🐍 設置 Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 安裝依賴
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio coverage[toml]
    
    - name: 🏗️ 設置測試環境
      run: |
        cp .env.example .env.test
        echo "TESTING=true" >> .env.test
        echo "DATABASE_URL=sqlite:///test.db" >> .env.test
        echo "LOG_LEVEL=WARNING" >> .env.test
    
    - name: 🧪 執行測試
      run: |
        echo "🔬 執行測試套件..."
        if [ -d "tests" ]; then
          pytest tests/ \
            --cov=src \
            --cov-report=xml:coverage.xml \
            --cov-report=html:htmlcov \
            --cov-report=term-missing \
            --junit-xml=pytest-report.xml \
            -v
        else
          echo "⚠️ 未找到測試目錄，跳過測試"
          # 創建空的覆蓋率報告
          echo '<?xml version="1.0"?><coverage version="0.0"></coverage>' > coverage.xml
        fi
    
    - name: 📊 上傳至 Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
        slug: Craig-0219/potato
    
    - name: 📁 上傳測試報告
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: |
          coverage.xml
          htmlcov/
          pytest-report.xml

  # 建構驗證 - 簡化整合
  build-check:
    name: 🏗️ 建構驗證
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.code == 'true' || needs.detect-changes.outputs.config == 'true'
    timeout-minutes: 5
    
    steps:
    - name: 📥 檢出程式碼
      uses: actions/checkout@v4
    
    - name: 🐍 設置 Python
      uses: actions/setup-python@v4  
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 🏗️ 驗證建構
      run: |
        echo "📦 安裝依賴..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
        echo "✅ 建構驗證完成"
        python --version
        pip list

  # CI Pipeline 狀態檢查
  ci-pipeline-status:
    name: CI Pipeline
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-gate, test-suite, build-check]
    if: always()
    timeout-minutes: 2
    
    steps:
    - name: 評估整體CI結果
      id: evaluate
      run: |
        echo "🚀 評估CI Pipeline整體結果..."
        
        # 檢查關鍵job的結果
        quality_result="${{ needs.quality-gate.result }}"
        test_result="${{ needs.test-suite.result }}"
        build_result="${{ needs.build-check.result }}"
        
        echo "Quality Gate: $quality_result"
        echo "Test Suite: $test_result"
        echo "Build Check: $build_result"
        
        # 計算整體狀態
        failed_jobs=""
        
        if [[ "$quality_result" == "failure" ]]; then
          failed_jobs="$failed_jobs quality-gate"
        fi
        
        if [[ "$test_result" == "failure" ]]; then
          failed_jobs="$failed_jobs test-suite"
        fi
        
        if [[ "$build_result" == "failure" ]]; then
          failed_jobs="$failed_jobs build-check"
        fi
        
        if [[ -n "$failed_jobs" ]]; then
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=關鍵步驟失敗:$failed_jobs" >> $GITHUB_OUTPUT
        else
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=所有檢查通過" >> $GITHUB_OUTPUT
        fi
    
    - name: 設置最終狀態
      run: |
        if [[ "${{ steps.evaluate.outputs.status }}" == "failure" ]]; then
          echo "❌ CI Pipeline 失敗: ${{ steps.evaluate.outputs.message }}"
          exit 1
        else
          echo "✅ CI Pipeline 通過: ${{ steps.evaluate.outputs.message }}"
        fi

  # Production Compliance 檢查
  production-compliance:
    name: Production Compliance Check
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-gate, test-suite, build-check]
    if: always()
    timeout-minutes: 2
    
    steps:
    - name: 檢查生產環境合規性
      run: |
        echo "🔍 執行生產環境合規性檢查..."
        
        # 檢查關鍵合規項目
        quality_result="${{ needs.quality-gate.result }}"
        test_result="${{ needs.test-suite.result }}"
        build_result="${{ needs.build-check.result }}"
        
        compliance_issues=""
        
        # 安全檢查必須通過或跳過
        if [[ "$quality_result" == "failure" ]]; then
          compliance_issues="$compliance_issues 安全檢查失敗"
        fi
        
        # 建構必須成功
        if [[ "$build_result" == "failure" ]]; then
          compliance_issues="$compliance_issues 建構失敗"
        fi
        
        # 如果有測試，必須通過
        if [[ "$test_result" == "failure" ]]; then
          compliance_issues="$compliance_issues 測試失敗"
        fi
        
        if [[ -n "$compliance_issues" ]]; then
          echo "❌ 生產環境合規性檢查失敗:$compliance_issues"
          echo "不符合生產環境部署要求"
          exit 1
        else
          echo "✅ 生產環境合規性檢查通過"
          echo "符合生產環境部署標準"
        fi