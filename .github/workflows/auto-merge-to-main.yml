name: 🚀 Auto Merge Dev to Main

# 觸發條件：當 dev 分支有新的推送時
on:
  push:
    branches: [dev]
    paths:
      # 只有當這些路徑發生變化時才觸發自動合併
      - 'bot/**'
      - 'shared/**'
      - 'web-ui/**'
      - 'requirements.txt'
      - 'docs/user-guides/**'
      - 'docs/system/**'
      - 'CHANGELOG.md'
      - 'QUICK_START.md'
      - 'start.py'
      - 'start.sh'
      - 'start.bat'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'pyproject.toml'

  # 允許手動觸發
  workflow_dispatch:
    inputs:
      merge_type:
        description: '合併類型'
        required: true
        default: 'selective'
        type: choice
        options:
        - selective
        - full
      skip_tests:
        description: '跳過測試'
        required: false
        default: false
        type: boolean

jobs:
  # 階段 1: 預檢查
  pre-checks:
    runs-on: ubuntu-latest
    outputs:
      should_merge: ${{ steps.check.outputs.should_merge }}
      test_passed: ${{ steps.test.outputs.passed }}

    steps:
    - name: 📥 Checkout Dev Branch
      uses: actions/checkout@v4
      with:
        ref: dev
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🔍 Check Commit Messages
      id: check
      run: |
        # 檢查最新提交是否包含特定標記
        LATEST_COMMIT=$(git log -1 --pretty=%B)
        echo "Latest commit: $LATEST_COMMIT"

        # 如果提交訊息包含 [no-merge] 則跳過合併
        if echo "$LATEST_COMMIT" | grep -q "\[no-merge\]"; then
          echo "🚫 提交包含 [no-merge] 標記，跳過自動合併"
          echo "should_merge=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        # 如果提交訊息包含 [merge] 則強制合併
        if echo "$LATEST_COMMIT" | grep -q "\[merge\]"; then
          echo "✅ 提交包含 [merge] 標記，執行自動合併"
          echo "should_merge=true" >> $GITHUB_OUTPUT
          exit 0
        fi

        # 檢查是否只是文檔變更
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
        echo "Changed files: $CHANGED_FILES"

        # 如果只改變了開發文檔，則跳過合併
        if echo "$CHANGED_FILES" | grep -v "^docs/plans/\|^docs/archived/\|^IMPLEMENTATION_PLAN.md" | grep -q "."; then
          echo "✅ 包含生產相關變更，執行自動合併"
          echo "should_merge=true" >> $GITHUB_OUTPUT
        else
          echo "📋 只包含開發文檔變更，跳過自動合併"
          echo "should_merge=false" >> $GITHUB_OUTPUT
        fi

    - name: 🧪 Quick Syntax Test
      id: test
      if: steps.check.outputs.should_merge == 'true' && !inputs.skip_tests
      run: |
        # 快速語法檢查
        echo "🔍 執行快速語法檢查..."

        # 檢查 Python 語法
        find bot/ -name "*.py" -exec python -m py_compile {} \; || {
          echo "❌ Python 語法檢查失敗"
          echo "passed=false" >> $GITHUB_OUTPUT
          exit 1
        }

        # 檢查重要文件是否存在
        if [[ ! -f "bot/main.py" || ! -f "requirements.txt" ]]; then
          echo "❌ 關鍵文件缺失"
          echo "passed=false" >> $GITHUB_OUTPUT
          exit 1
        fi

        echo "✅ 語法檢查通過"
        echo "passed=true" >> $GITHUB_OUTPUT

  # 階段 2: 選擇性合併
  selective-merge:
    needs: pre-checks
    if: needs.pre-checks.outputs.should_merge == 'true' && needs.pre-checks.outputs.test_passed == 'true'
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Main Branch
      uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: ⚙️ Configure Git
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git config merge.ours.driver true

    - name: 🔄 Fetch Latest Dev
      run: |
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        git fetch origin dev

    - name: 📋 Selective Merge Strategy
      id: merge
      run: |
        echo "🎯 開始選擇性合併 dev → main"

        # 使用 .gitattributes 策略合併
        if git merge origin/dev --no-edit -m "🚀 Auto-merge dev to main

        🤖 自動合併 (Selective Strategy)
        ⏰ $(date '+%Y-%m-%d %H:%M:%S UTC')
        📝 提交: $(git rev-parse --short origin/dev)

        ✅ 合併內容:
        • 生產代碼變更
        • 用戶文檔更新
        • 系統配置文件

        🚫 排除內容:
        • 開發計劃文檔
        • 修復歷程記錄
        • 開發工具腳本

        Generated by GitHub Actions"; then
          echo "✅ 合併成功"
          echo "merge_success=true" >> $GITHUB_OUTPUT
        else
          echo "❌ 合併衝突，需要人工處理"
          echo "merge_success=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: 📤 Push to Main
      if: steps.merge.outputs.merge_success == 'true'
      run: |
        echo "🚀 推送合併結果到 main 分支"
        git push origin main

    - name: 📊 Create Summary Comment
      if: steps.merge.outputs.merge_success == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const merge_commit = await github.rest.repos.getCommit({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: 'main'
          });

          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: merge_commit.data.sha,
            body: `🚀 **自動合併完成**

            📊 **合併摘要:**
            - 源分支: \`dev\`
            - 目標分支: \`main\`
            - 合併策略: 選擇性合併
            - 執行時間: \`${new Date().toISOString()}\`

            ✅ **成功合併的內容:**
            - 生產代碼和配置
            - 用戶文檔更新
            - 系統設置文件

            🔒 **main 分支保護:**
            - 開發文檔未被覆蓋
            - 修復計劃保持分離
            - 生產版本保持乾淨

            🤖 此合併由 GitHub Actions 自動執行`
          });

  # 階段 3: 合併失敗處理
  merge-failure:
    needs: [pre-checks, selective-merge]
    if: failure() && needs.pre-checks.outputs.should_merge == 'true'
    runs-on: ubuntu-latest

    steps:
    - name: 📧 Create Issue for Manual Review
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 自動合併失敗 - 需要人工處理',
            body: `## 🚨 自動合併失敗報告

            **⏰ 失敗時間:** ${new Date().toISOString()}
            **📝 觸發提交:** ${context.sha}
            **🔗 工作流程:** [查看詳情](${context.payload.repository.html_url}/actions/runs/${context.runId})

            ## 🔍 可能原因
            - ❌ 合併衝突需要人工解決
            - ❌ 語法檢查未通過
            - ❌ 關鍵文件缺失或損壞

            ## 🛠️ 處理步驟
            1. 檢查 [Actions 日誌](${context.payload.repository.html_url}/actions/runs/${context.runId}) 了解具體失敗原因
            2. 在本地執行手動合併：
               \`\`\`bash
               git checkout main
               git pull origin main
               git merge origin/dev
               # 解決衝突後
               git push origin main
               \`\`\`
            3. 合併完成後關閉此 Issue

            ## 📋 檢查清單
            - [ ] 檢查合併衝突
            - [ ] 確認語法正確性
            - [ ] 驗證核心功能
            - [ ] 測試生產部署

            /label bug,auto-merge,needs-review`,
            labels: ['bug', 'auto-merge', 'needs-review']
          });

  # 階段 4: 通知
  notify:
    needs: [pre-checks, selective-merge]
    if: always()
    runs-on: ubuntu-latest

    steps:
    - name: 📢 Slack/Discord Notification (Optional)
      if: needs.selective-merge.result == 'success'
      run: |
        echo "🎉 自動合併成功通知"
        echo "可以在這裡添加 Slack 或 Discord Webhook 通知"
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"✅ Potato Bot: 自動合併 dev → main 成功完成!"}' \
        #   $SLACK_WEBHOOK_URL
