name: 🛡️ Security Scans

on:
  pull_request:
    branches: [main, develop, dev]
  push:
    branches: [main, develop, dev]
  schedule:
    # 每天凌晨 2 點執行安全掃描
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10'

jobs:
  secret-scan:
    name: 🔐 機密資訊掃描
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 檢出程式碼
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🔍 安裝和設置 detect-secrets
      run: |
        pip install detect-secrets
        
        # 如果沒有 baseline，創建一個
        if [[ ! -f .secrets.baseline ]]; then
          echo "🆕 創建新的 secrets baseline..."
          detect-secrets scan --all-files --force-use-all-plugins > .secrets.baseline
        fi
    
    - name: 🔒 掃描新的機密資訊
      run: |
        echo "🔍 掃描新的機密資訊..."
        detect-secrets scan --baseline .secrets.baseline --all-files
        
        if [[ $? -ne 0 ]]; then
          echo "❌ 發現新的潜在機密資訊!"
          echo "請檢查並更新 .secrets.baseline 或移除機密資訊"
          exit 1
        else
          echo "✅ 未發現新的機密資訊"
        fi
    
    - name: 🔐 驗證現有 baseline
      run: |
        echo "🔍 驗證現有 secrets baseline..."
        if [[ -f .secrets.baseline ]]; then
          echo "✅ Secrets baseline 檔案存在，跳過互動式驗證"
        else
          echo "⚠️ 未找到 secrets baseline 檔案"
        fi

  bandit-scan:
    name: 🐍 Python 安全掃描
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 檢出程式碼
      uses: actions/checkout@v4
    
    - name: 🐍 設置 Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 安裝 Bandit
      run: |
        pip install bandit[toml]
    
    - name: 🛡️ 執行 Bandit 安全掃描
      run: |
        echo "🔍 執行 Python 安全掃描..."
        
        # 使用 pyproject.toml 中的配置執行 bandit
        bandit -r bot/ shared/ -f json -o bandit-report.json || true
        bandit -r bot/ shared/ -f txt || true
        
        # 檢查高風險和中等風險問題
        if [[ -f "bandit-report.json" ]]; then
          HIGH_ISSUES=$(jq '.results[] | select(.issue_severity == "HIGH") | length' bandit-report.json 2>/dev/null | awk '{sum+=$1} END {print sum+0}')
          MEDIUM_ISSUES=$(jq '.results[] | select(.issue_severity == "MEDIUM") | length' bandit-report.json 2>/dev/null | awk '{sum+=$1} END {print sum+0}')
          TOTAL_ISSUES=$(jq '.results | length' bandit-report.json 2>/dev/null || echo "0")
          
          echo "📊 Bandit 掃描結果:"
          echo "  • 高風險問題: $HIGH_ISSUES"
          echo "  • 中等風險問題: $MEDIUM_ISSUES"
          echo "  • 總問題數量: $TOTAL_ISSUES"
          
          if [[ $HIGH_ISSUES -gt 0 ]]; then
            echo "❌ 發現 $HIGH_ISSUES 個高風險安全問題，需要修復"
            exit 1
          elif [[ $MEDIUM_ISSUES -gt 5 ]]; then
            echo "⚠️ 發現過多中等風險問題 ($MEDIUM_ISSUES > 5)，建議修復"
            echo "但不阻斷流程"
          else
            echo "✅ 安全掃描通過"
          fi
        else
          echo "⚠️ Bandit 報告生成失敗"
        fi
    
    - name: 📊 上傳 Bandit 報告
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json

  semgrep-scan:
    name: 🔍 Semgrep 程式碼分析
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: 📥 檢出程式碼
      uses: actions/checkout@v4
    
    - name: 🔍 執行 Semgrep 掃描
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/python
          p/security-audit
          p/django
          p/flask
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    
    - name: 📋 Semgrep 結果摘要
      if: always()
      run: |
        echo "🔍 Semgrep 程式碼安全分析完成"
        echo "📊 分析規則包括:"
        echo "  • Python 通用安全規則"
        echo "  • 安全審計規則"
        echo "  • Django/Flask 框架安全規則"

  dependency-vulnerability:
    name: 🚨 依賴漏洞掃描
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 檢出程式碼
      uses: actions/checkout@v4
    
    - name: 🐍 設置 Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 安裝依賴
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🛡️ Safety 漏洞掃描
      run: |
        echo "🔒 執行 Safety 漏洞掃描..."
        
        # 使用穩定版本的 Safety (避免版本衝突)
        pip install "safety>=2.3.5,<4.0.0" --force-reinstall
        
        # 執行 safety 檢查 (簡化參數，避免不兼容選項)
        safety check --json > safety-report.json || echo "Safety 掃描完成，可能有警告"
        
        # 顯示結果摘要
        safety check || echo "Safety 發現一些問題，但不阻斷流程"
        
        # 檢查報告是否生成
        if [[ -f "safety-report.json" && -s "safety-report.json" ]]; then
          echo "✅ Safety 報告已生成"
          # 使用更簡單的方式計算問題數量
          ISSUES_COUNT=$(python3 -c "
          import json
          try:
              with open('safety-report.json', 'r') as f:
                  data = json.load(f)
              if isinstance(data, list):
                  print(len(data))
              elif isinstance(data, dict) and 'vulnerabilities' in data:
                  print(len(data['vulnerabilities']))
              else:
                  print(0)
          except:
              print(0)
          " 2>/dev/null || echo "0")
          echo "🔍 發現 $ISSUES_COUNT 個潛在漏洞"
        else
          echo "⚠️ Safety 報告生成失敗，創建空報告"
          echo "[]" > safety-report.json
        fi
    
    - name: 🔍 Pip-audit 掃描
      run: |
        echo "📊 執行 pip-audit 掃描..."
        pip install pip-audit
        
        # 執行 pip-audit 並生成報告
        if pip-audit --format=json --output=pip-audit-report.json; then
          echo "✅ Pip-audit JSON 報告生成成功"
        else
          echo "⚠️ Pip-audit JSON 報告生成失敗，創建空報告"
          echo "[]" > pip-audit-report.json
        fi
        
        # 顯示人類可讀的結果
        pip-audit --format=columns || echo "⚠️ Pip-audit 發現一些問題，但不阻斷流程"
    
    - name: 📊 上傳漏洞報告
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: vulnerability-reports
        path: |
          safety-report.json
          pip-audit-report.json

  docker-security:
    name: 🐳 Docker 安全掃描
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.changed_files, 'Dockerfile')
    
    steps:
    - name: 📥 檢出程式碼
      uses: actions/checkout@v4
    
    - name: 🐳 建構 Docker 映像
      run: |
        echo "🏗️ 建構 Docker 映像用於安全掃描..."
        docker build -t potato-bot:security-scan .
    
    - name: 🔍 安裝 Trivy
      run: |
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
    
    - name: 🛡️ Trivy 映像掃描
      run: |
        echo "🔍 執行 Trivy Docker 映像安全掃描..."
        
        # 掃描高嚴重度漏洞
        trivy image --severity HIGH,CRITICAL --format table potato-bot:security-scan
        
        # 產生 JSON 報告
        trivy image --severity HIGH,CRITICAL --format json --output trivy-report.json potato-bot:security-scan
        
        # 檢查是否有嚴重漏洞
        CRITICAL_COUNT=$(trivy image --severity CRITICAL --format json potato-bot:security-scan | jq '.Results[]?.Vulnerabilities // [] | length' | awk '{sum+=$1} END {print sum+0}')
        
        if [[ $CRITICAL_COUNT -gt 0 ]]; then
          echo "❌ 發現 $CRITICAL_COUNT 個嚴重安全漏洞"
          echo "請更新基礎映像或相關套件"
          exit 1
        else
          echo "✅ 未發現嚴重安全漏洞"
        fi
    
    - name: 📊 上傳 Trivy 報告
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-security-report
        path: trivy-report.json

  security-summary:
    name: 📋 安全掃描總結
    needs: [secret-scan, bandit-scan, semgrep-scan, dependency-vulnerability]
    runs-on: ubuntu-latest
    if: always()
    timeout-minutes: 5
    
    steps:
    - name: 📊 安全掃描結果總結
      run: |
        echo "🛡️ 安全掃描完成總結"
        echo ""
        echo "✅ 已完成的安全檢查:"
        echo "  • 🔐 機密資訊掃描 - ${{ needs.secret-scan.result }}"
        echo "  • 🐍 Python Bandit 掃描 - ${{ needs.bandit-scan.result }}"
        echo "  • 🔍 Semgrep 程式碼分析 - ${{ needs.semgrep-scan.result }}"
        echo "  • 🚨 依賴漏洞掃描 - ${{ needs.dependency-vulnerability.result }}"
        echo ""
        
        # 檢查是否有失敗的任務
        if [[ "${{ needs.secret-scan.result }}" == "failure" ]] || 
           [[ "${{ needs.bandit-scan.result }}" == "failure" ]] || 
           [[ "${{ needs.semgrep-scan.result }}" == "failure" ]] || 
           [[ "${{ needs.dependency-vulnerability.result }}" == "failure" ]]; then
          echo "⚠️ 部分安全檢查發現問題，請檢查詳細報告"
          echo ""
          echo "💡 建議動作:"
          echo "  1. 檢查各個安全掃描的詳細結果"
          echo "  2. 修復發現的安全問題"
          echo "  3. 更新相關依賴套件"
          echo "  4. 重新執行安全掃描確認修復"
        else
          echo "🎉 所有安全檢查均通過!"
          echo ""
          echo "🔒 您的程式碼目前符合安全標準"
        fi